{% comment %}
  LINE Login App Embed Block - Processes LINE login redirects and handles authentication
{% endcomment %}

<div id="line-login-embed" class="line-login-embed">
  <!-- Hidden container - no visible UI -->
  
  {% if request.path contains '/account/login' %}
  <!-- Hidden form for Shopify login (moved from line_login_processor.liquid) -->
  <form id="shopify-auto-login" method="post" action="/account/login" style="display: none;">
    <input type="email" name="customer[email]" id="customer-email">
    <input type="password" name="customer[password]" id="customer-password">
    <input type="hidden" name="form_type" value="customer_login">
    <input type="hidden" name="utf8" value="‚úì">
    <input type="hidden" name="return_to" id="return-to" value="/account">
    <input type="hidden" name="g-recaptcha-response" id="g-recaptcha-response" value="">
  </form>
  
  <!-- Loading overlay for LINE login -->
  <div id="line-login-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center; flex-direction: column;">
    <div id="line-login-message" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); text-align: center; max-width: 90%; width: 400px;">
      <div class="spinner" style="margin: 0 auto 1rem; width: 40px; height: 40px; border: 4px solid rgba(6, 199, 85, 0.2); border-top-color: #06C755; border-radius: 50%; animation: line-login-spin 1s linear infinite;"></div>
      <p style="font-size: 18px; margin-bottom: 0.5rem; color: #333; font-weight: bold;">Ê≠£Âú®Ëá™ÂãïÁôªÂÖ•‰∏≠‚ãØË´ãÁ®çÂÄô üêæ</p>
      <p style="font-size: 14px; color: #666; margin: 0;">Logging in with LINE...</p>
    </div>
  </div>
  
  <style>
    @keyframes line-login-spin {
      to { transform: rotate(360deg); }
    }
    
    #line-login-overlay.show {
      display: flex !important;
    }
    
    .line-login-message {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #06C755;
      border-radius: 5px;
      background-color: #f0fff5;
      text-align: center;
    }
    
    .line-login-error {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #ff4b4b;
      border-radius: 5px;
      background-color: #fff0f0;
      text-align: center;
      color: #d32f2f;
    }
    
    /* Hide login form during redirect */
    body.line-login-in-progress form.customer_login,
    body.line-login-in-progress form#customer_login,
    body.line-login-in-progress form[action*="/account/login"] {
      opacity: 0;
      pointer-events: none;
      position: absolute;
      z-index: -1;
    }
    
    /* Hide cursor in input fields during redirects */
    body.line-login-in-progress input {
      caret-color: transparent !important;
    }
  </style>
  {% endif %}
</div>

<script>
  // Create global config object for LINE Login
  window.lineLoginConfig = window.lineLoginConfig || {};
  
  // Get Storefront API token from theme settings or fallback to shop.storefront_access_token
  window.lineLoginConfig.storefrontApiToken = {{ block.settings.storefront_api_token | json }} || {{ shop.storefront_access_token | json }} || '';
  
  // Debug mode
  window.lineLoginConfig.debug = false;
  
  // URL for JWT verification API endpoint
  window.lineLoginConfig.jwtVerifyUrl = 'https://shopify-collection-sorter.onrender.com/auth/line/verify';

  // Immediately executing function to avoid sandboxing issues
  (function() {
    // Function to store login parameters in session storage
    function storeLoginParams(params) {
      if (params && Object.keys(params).length > 0) {
        try {
          sessionStorage.setItem('lineLoginParams', JSON.stringify(params));
        } catch (e) {
          // Silent error
        }
      }
    }
    
    // Function to get stored login parameters
    function getStoredLoginParams() {
      try {
        const storedParams = sessionStorage.getItem('lineLoginParams');
        const params = storedParams ? JSON.parse(storedParams) : null;
        return params;
      } catch (e) {
        // Silent error
        return null;
      }
    }
    
    // Function to clear stored login parameters
    function clearStoredLoginParams() {
      try {
        sessionStorage.removeItem('lineLoginParams');
      } catch (e) {
        // Silent error
      }
    }
    
    // Function to get URL parameters (consolidated from both files)
    function getUrlParams() {
      const params = {};
      const searchParams = new URLSearchParams(window.location.search);
      for (const [key, value] of searchParams.entries()) {
        params[key] = value;
      }
      
      // Also check hash fragment (from processor file)
      if (window.location.hash && window.location.hash.length > 1) {
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        for (const [key, value] of hashParams.entries()) {
          params[key] = value;
        }
      }
      
      return params;
    }

    // Function to check if CAPTCHA is required on the page
    function isCaptchaRequired() {
      return document.querySelector('.g-recaptcha') !== null || 
             document.querySelector('[data-sitekey]') !== null ||
             document.querySelector('[data-recaptcha-sitekey]') !== null;
    }
    
    // Function to show loading overlay
    function showLoadingOverlay() {
      const overlay = document.getElementById('line-login-overlay');
      if (overlay) {
        overlay.classList.add('show');
        overlay.style.display = 'flex';
      }
    }
    
    // Function to hide loading overlay
    function hideLoadingOverlay() {
      const overlay = document.getElementById('line-login-overlay');
      if (overlay) {
        overlay.classList.remove('show');
        // Add a slight delay before removing from DOM to allow for transition
        setTimeout(() => {
          overlay.style.display = 'none';
        }, 300);
      }
    }
    
    // Function to show CAPTCHA warning
    function showCaptchaWarning() {
      try {
        // Get message box and other elements
        const messageBox = document.querySelector('#line-login-message');
        
        // Hide loading overlay since user interaction is needed
        const overlay = document.getElementById('line-login-overlay');
        if (overlay) {
          overlay.style.backgroundColor = 'rgba(0,0,0,0.2)';
          
          // Move the message box to the top to avoid covering the CAPTCHA
          if (messageBox) {
            messageBox.style.marginTop = '-200px';
          }
        }
        
        // Remove the class that hides the form to ensure CAPTCHA is visible
        document.body.classList.remove('line-login-in-progress');
        
        // Ensure the login form is visible
        const loginForm = document.querySelector('form.customer_login') || 
                          document.querySelector('form#customer_login') || 
                          document.querySelector('form[action*="/account/login"]');
        if (loginForm) {
          loginForm.style.opacity = '1';
          loginForm.style.pointerEvents = 'auto';
          loginForm.style.position = 'static';
          loginForm.style.zIndex = 'auto';
          
          // Add a message to guide the user if it doesn't exist yet
          if (!document.querySelector('.line-login-message')) {
            // Create a message to guide the user
            const messageDiv = document.createElement('div');
            messageDiv.className = 'line-login-message';
            messageDiv.innerHTML = '<p style="font-weight: bold;">ÊÇ®Â∑≤Âæû LINE ÁôªÂÖ•ÔºåË´ãÂÆåÊàê‰∏ãÊñπÈ©óË≠âÁ¢º‰ª•ÁπºÁ∫å„ÄÇ</p>' + 
                                  '<p>You\'ve logged in with LINE. Please complete the CAPTCHA below to continue.</p>';
            messageDiv.style.color = '#06C755'; // LINE green color
            
            // Insert at the top of the form
            loginForm.insertBefore(messageDiv, loginForm.firstChild);
          }
        }
        
        // Ensure the CAPTCHA is visible by scrolling to it if needed
        const captcha = document.querySelector('.g-recaptcha') || 
                       document.querySelector('[data-sitekey]') ||
                       document.querySelector('[data-recaptcha-sitekey]');
        if (captcha) {
          setTimeout(() => {
            captcha.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }, 500);
        }
      } catch (e) {
        // Silent error - just hide the overlay completely if there's an error
        hideLoadingOverlay();
        document.body.classList.remove('line-login-in-progress');
      }
    }
    
    // Function to verify and process JWT token
    async function verifyAndProcessJWT(token) {
      try {
        showLoadingOverlay();
        
        // Enhanced token validation
        if (!token || typeof token !== 'string' || token.length < 10) {
          throw new Error('Invalid token format');
        }
        
        try {
          // Send token to backend for verification with detailed error handling
          const response = await fetch(window.lineLoginConfig.jwtVerifyUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ token })
          });
          
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`JWT verification failed: ${response.statusText}. Details: ${errorText}`);
          }
          
          // Get the verified data
          const userData = await response.json();
          
          // Now process the login with verified data
          processLineLoginWithData(userData);
        } catch (fetchError) {
          // Check if it's a CORS issue
          if (fetchError.message.includes('CORS') || fetchError.message.includes('Failed to fetch')) {
            throw new Error('CORS error: The server is not accessible from this domain. Please check CORS configuration.');
          } else {
            throw fetchError;
          }
        }
        
      } catch (error) {
        hideLoadingOverlay();
        
        // Add error message to the page
        try {
          const container = document.querySelector('.customer.login') || document.querySelector('.page-width');
          if (container) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'line-login-error';
            errorDiv.innerHTML = `<p>LINE Login Error: ${error.message}</p>`;
            container.prepend(errorDiv);
          }
        } catch (e) {
          // Silent error
        }
      }
    }

    // Process LINE login with verified data
    function processLineLoginWithData(userData) {
      if (userData && userData.line_login === 'success') {
        try {
          // Add class to body to hide login forms
          document.body.classList.add('line-login-in-progress');
          
          // Show loading overlay if not already showing
          showLoadingOverlay();
          
          // Extract customer information
          const customerEmail = userData.customer_email;
          const accessToken = userData.access_token;
          const returnUrl = userData.return_url || '/account';
          
          if (customerEmail && accessToken) {
            // Wait a bit to make sure the page is fully loaded
            setTimeout(() => {
              try {
                // Find the standard customer login form
                const loginForm = document.querySelector('form.customer_login') || 
                                  document.querySelector('form#customer_login') || 
                                  document.querySelector('form[action*="/account/login"]');
                
                if (loginForm) {
                  // Find email and password inputs within this form
                  let emailInput = loginForm.querySelector('input[type="email"], input[name="customer[email]"]');
                  let passwordInput = loginForm.querySelector('input[type="password"], input[name="customer[password]"]');
                  const returnToInput = loginForm.querySelector('input[name="return_to"]');
                  
                  // Try alternative selectors if the standard ones don't work
                  if (!emailInput) {
                    emailInput = document.getElementById('customer-email') || 
                                document.getElementById('customer_email');
                  }
                  
                  if (!passwordInput) {
                    passwordInput = document.getElementById('customer-password') || 
                                   document.getElementById('customer_password');
                  }
                  
                  if (emailInput && passwordInput) {
                    // Set the values
                    emailInput.value = customerEmail;
                    passwordInput.value = accessToken;
                    
                    // Trigger input events to update any validators
                    try {
                      emailInput.dispatchEvent(new Event('input', { bubbles: true }));
                      passwordInput.dispatchEvent(new Event('input', { bubbles: true }));
                      
                      // Also trigger change events
                      emailInput.dispatchEvent(new Event('change', { bubbles: true }));
                      passwordInput.dispatchEvent(new Event('change', { bubbles: true }));
                    } catch (e) {
                      // Silent error
                    }
                    
                    // Set return URL if field exists
                    if (returnToInput) {
                      returnToInput.value = returnUrl;
                    }
                    
                    // Always attempt to submit the form, even if CAPTCHA is detected
                    const hasCaptcha = isCaptchaRequired();
                    if (hasCaptcha) {
                      // Make the overlay semi-transparent but keep it visible
                      const overlay = document.getElementById('line-login-overlay');
                      if (overlay) {
                        overlay.style.backgroundColor = 'rgba(0,0,0,0.1)';
                      }
                      
                      // Keep the form visible but still try to submit
                      document.body.classList.remove('line-login-in-progress');
                      
                      // Try to submit the form
                      setTimeout(() => {
                        try {
                          // Try clicking the submit button first
                          const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
                          if (submitButton) {
                            submitButton.click();
                            
                            // Check if form submission was successful after a short delay
                            setTimeout(() => {
                              // If we're still on the login page, show a message to complete CAPTCHA manually
                              if (window.location.href.includes('/account/login')) {
                                showCaptchaWarning();
                              }
                            }, 1000);
                          } else {
                            // Fall back to form.submit() if no button found
                            loginForm.submit();
                          }
                        } catch (e) {
                          showCaptchaWarning();
                        }
                      }, 300);
                    } else {
                      // No CAPTCHA, proceed normally
                      setTimeout(() => {
                        try {
                          // Try clicking the submit button first (most reliable)
                          const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
                          if (submitButton) {
                            submitButton.click();
                          } else {
                            // Fall back to form.submit() if no button found
                            loginForm.submit();
                          }
                        } catch (e) {
                          // If all else fails, just redirect to account
                          window.location.href = '/account';
                        }
                      }, 300);
                    }
                  } else {
                    hideLoadingOverlay();
                    document.body.classList.remove('line-login-in-progress');
                  }
                } else {
                  hideLoadingOverlay();
                  document.body.classList.remove('line-login-in-progress');
                }
              } catch (e) {
                // If all else fails, just redirect to account
                window.location.href = '/account';
              }
            }, 500);
          } else {
            hideLoadingOverlay();
            document.body.classList.remove('line-login-in-progress');
          }
        } catch (e) {
          hideLoadingOverlay();
        }
      } else {
        hideLoadingOverlay();
      }
    }
    
    // Main function to process LINE login from JWT token
    function processLineLogin() {
      const params = getUrlParams();
      
      // Check if we have LINE-specific parameters in the URL
      if (params.line_token || (params.code && window.location.href.includes('line'))) {
        // Show loading overlay
        showLoadingOverlay();
        
        // Process the token if available
        if (params.line_token) {
          storeLoginParams({ line_token: params.line_token });
          verifyAndProcessJWT(params.line_token);
          
          // Clean up URL to remove token
          try {
            const newUrl = new URL(window.location.href);
            newUrl.searchParams.delete('line_token');
            window.history.replaceState({}, document.title, newUrl.toString());
          } catch (e) {
            // Silent error - URL cleanup is not critical
          }
        } 
        // Process legacy parameters if available
        else if (params.code && params.state) {
          processLegacyLineLogin(params);
        }
      } else {
        // Check if we have stored parameters from a previous attempt
        const storedParams = getStoredLoginParams();
        if (storedParams && storedParams.line_token) {
          // Process stored token
          verifyAndProcessJWT(storedParams.line_token);
          
          // Clear stored params after processing
          clearStoredLoginParams();
        }
      }
    }
    
    // Run when page loads and DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      processLineLogin();
    });
  })();
</script>

{% schema %}
{
  "name": "LINE Login Processor",
  "target": "section",
  "templates": ["customers/login", "customers/account", "customers/register"],
  "settings": [
    {
      "type": "text",
      "id": "storefront_api_token",
      "label": "Storefront API Token",
      "info": "Optional: Enter your Storefront API token if not set in theme settings"
    }
  ]
}
{% endschema %}
