{% comment %}
  Facebook Login App Embed Block - Processes Facebook login redirects and handles authentication
{% endcomment %}

<div id="facebook-login-embed" class="facebook-login-embed">
  <!-- Hidden container - no visible UI -->
  
  {% if request.path contains '/account/login' %}
  <!-- Loading overlay for Facebook login -->
  <div id="facebook-login-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center; flex-direction: column;">
    <div id="facebook-login-message" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); text-align: center; max-width: 90%; width: 400px;">
      <div class="spinner" style="margin: 0 auto 1rem; width: 40px; height: 40px; border: 4px solid rgba(24, 119, 242, 0.2); border-top-color: #1877F2; border-radius: 50%; animation: facebook-login-spin 1s linear infinite;"></div>
      <p style="font-size: 18px; margin-bottom: 0.5rem; color: #333; font-weight: bold;">正在自動登入中⋯請稍候 </p>
      <p style="font-size: 14px; color: #666; margin: 0;">Logging in with Facebook...</p>
      <p id="facebook-captcha-warning" style="display: none; margin-top: 1rem; color: #d32f2f; font-weight: bold; background-color: #ffebee; padding: 10px; border-radius: 4px;">請完成驗證碼以繼續登入 / Please complete the CAPTCHA to continue</p>
      <button id="facebook-login-close" onclick="document.getElementById('facebook-login-overlay').style.display='none'; document.body.classList.remove('facebook-login-in-progress');" style="display: none; margin-top: 1rem; padding: 8px 16px; background-color: #1877F2; color: white; border: none; border-radius: 4px; cursor: pointer;">關閉此視窗 / Close this overlay</button>
    </div>
  </div>
  
  <style>
    @keyframes facebook-login-spin {
      to { transform: rotate(360deg); }
    }
    
    #facebook-login-overlay.show {
      display: flex !important;
    }
    
    .facebook-login-message {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #1877F2;
      border-radius: 5px;
      background-color: #f0f6ff;
      text-align: center;
    }
    
    .facebook-login-error {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #ff4b4b;
      border-radius: 5px;
      background-color: #fff0f0;
      text-align: center;
      color: #d32f2f;
    }
    
    /* Hide login form during redirect */
    body.facebook-login-in-progress form.customer_login,
    body.facebook-login-in-progress form#customer_login,
    body.facebook-login-in-progress form[action*="/account/login"] {
      opacity: 0;
      pointer-events: none;
      position: absolute;
      z-index: -1;
    }
  </style>
  
  <script>
    (function() {
      // Configuration for Facebook login
      window.facebookLoginConfig = {
        jwtVerifyUrl: '{{ block.settings.app_url }}/auth/facebook/verify',
        storefrontToken: '{{ block.settings.storefront_api_token }}' || '{{ shop.metafields.theme.api_token }}',
        debug: false
      };
      
      // Function to store login parameters
      function storeLoginParams(params) {
        try {
          sessionStorage.setItem('facebook_login_params', JSON.stringify(params));
        } catch (e) {
          // Silent error - may fail in private browsing mode
        }
      }
      
      // Function to retrieve stored login parameters
      function getStoredLoginParams() {
        try {
          const params = sessionStorage.getItem('facebook_login_params');
          return params ? JSON.parse(params) : null;
        } catch (e) {
          return null;
        }
      }
      
      // Function to clear stored login parameters
      function clearStoredLoginParams() {
        try {
          sessionStorage.removeItem('facebook_login_params');
        } catch (e) {
          // Silent error
        }
      }
      
      // Function to get URL parameters
      function getUrlParams() {
        const params = {};
        try {
          const searchParams = new URLSearchParams(window.location.search);
          for (const [key, value] of searchParams.entries()) {
            params[key] = value;
          }
          
          // Also check hash fragment
          if (window.location.hash && window.location.hash.length > 1) {
            const hashParams = new URLSearchParams(window.location.hash.substring(1));
            for (const [key, value] of hashParams.entries()) {
              params[key] = value;
            }
          }
        } catch (e) {
        }
        
        return params;
      }

      // Function to check if CAPTCHA is required on the page
      function isCaptchaRequired() {
        // Look for a Facebook CAPTCHA element on the page
        const captcha = document.querySelector('.fb-captcha') || 
                        document.querySelector('[data-facebook-captcha]');
        
        return !!captcha;
      }
      
      // Function to show loading overlay
      function showLoadingOverlay() {
        try {
          const overlay = document.getElementById('facebook-login-overlay');
          if (overlay) {
            overlay.style.display = 'flex';
          } else {
          }
        } catch (e) {
        }
      }
      
      // Function to hide loading overlay
      function hideLoadingOverlay() {
        try {
          const overlay = document.getElementById('facebook-login-overlay');
          if (overlay) {
            overlay.style.display = 'none';
          } else {
          }
        } catch (e) {
        }
      }
      
      // Function to show CAPTCHA warning
      function showCaptchaWarning() {
        try {
          const captchaWarning = document.getElementById('facebook-captcha-warning');
          const closeButton = document.getElementById('facebook-login-close');
          const spinner = document.querySelector('#facebook-login-message .spinner');
          const messageBox = document.getElementById('facebook-login-message');
          
          if (captchaWarning) {
            captchaWarning.style.display = 'block';
          }
          
          if (closeButton) {
            closeButton.style.display = 'inline-block';
            // The onclick attribute is already set in the HTML
          }
          
          if (spinner) {
            spinner.style.display = 'none';
          }
          
          // Make the overlay more transparent to allow seeing the CAPTCHA
          const overlay = document.getElementById('facebook-login-overlay');
          if (overlay) {
            overlay.style.backgroundColor = 'rgba(0,0,0,0.2)';
            
            // Move the message box to the top to avoid covering the CAPTCHA
            if (messageBox) {
              messageBox.style.marginTop = '-200px';
            }
          }
          
          // Remove the class that hides the form to ensure CAPTCHA is visible
          document.body.classList.remove('facebook-login-in-progress');
          
          // Ensure the login form is visible
          const loginForm = document.querySelector('form.customer_login') || 
                            document.querySelector('form#customer_login') || 
                            document.querySelector('form[action*="/account/login"]');
          if (loginForm) {
            loginForm.style.opacity = '1';
            loginForm.style.pointerEvents = 'auto';
            loginForm.style.position = 'static';
            loginForm.style.zIndex = 'auto';
          }
          
          // Ensure the CAPTCHA is visible by scrolling to it if needed
          const captcha = document.querySelector('.fb-captcha') || 
                         document.querySelector('[data-facebook-captcha]');
          if (captcha) {
            setTimeout(() => {
              captcha.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 500);
          }
        } catch (e) {
          // Silent error - just hide the overlay completely if there's an error
          hideLoadingOverlay();
          document.body.classList.remove('facebook-login-in-progress');
        }
      }
      
      // Function to verify JWT token with the server
      async function verifyAndProcessJWT(token) {
        try {
          showLoadingOverlay();
          
          // Enhanced token validation
          if (!token || typeof token !== 'string' || token.length < 10) {
            console.error('Invalid token format');
            hideLoadingOverlay();
            return;
          }
          
          // Verify token with server
          const response = await fetch(window.facebookLoginConfig.jwtVerifyUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ token }),
          });
          
          if (!response.ok) {
            console.error('Token verification failed:', response.status);
            hideLoadingOverlay();
            return;
          }
          
          const userData = await response.json();
          
          // Process the verified user data
          if (userData && userData.facebook_login === 'success') {
            processFacebookLoginWithData(userData);
          } else {
            console.error('Invalid user data from token verification');
            hideLoadingOverlay();
          }
        } catch (error) {
          console.error('Error verifying token:', error);
          hideLoadingOverlay();
        }
      }
      
      // Process the Facebook login with verified data
      function processFacebookLoginWithData(userData) {
        if (userData && userData.facebook_login === 'success') {
          try {
            // Add class to body to hide login forms
            document.body.classList.add('facebook-login-in-progress');
            
            // Show loading overlay if not already showing
            showLoadingOverlay();
            
            // Extract customer email and access token from the verified data
            const customerEmail = userData.customer_email;
            const accessToken = userData.access_token;
            const returnUrl = userData.return_url || '/account';
            
            if (customerEmail && accessToken) {
              // Wait a bit to make sure the page is fully loaded
              setTimeout(() => {
                try {
                  // Find the standard customer login form
                  const loginForm = document.querySelector('form.customer_login') || 
                                   document.querySelector('form#customer_login') || 
                                   document.querySelector('form[action*="/account/login"]');
                  
                  if (loginForm) {
                    // Find email and password inputs within this form
                    const emailInput = loginForm.querySelector('input[type="email"], input[name="customer[email]"]');
                    const passwordInput = loginForm.querySelector('input[type="password"], input[name="customer[password]"]');
                    const returnToInput = loginForm.querySelector('input[name="return_to"]');
                    const captchaResponse = loginForm.querySelector('input[name="fb-captcha-response"]');
                    
                    if (emailInput && passwordInput) {
                      // Fill in the form fields
                      emailInput.value = customerEmail;
                      passwordInput.value = accessToken;
                      
                      // Trigger input events to update any validators
                      try {
                        emailInput.dispatchEvent(new Event('input', { bubbles: true }));
                        passwordInput.dispatchEvent(new Event('input', { bubbles: true }));
                        
                        // Also trigger change events
                        emailInput.dispatchEvent(new Event('change', { bubbles: true }));
                        passwordInput.dispatchEvent(new Event('change', { bubbles: true }));
                      } catch (e) {
                      }
                      
                      // Set return URL if available
                      if (returnToInput && returnUrl) {
                        returnToInput.value = returnUrl;
                      }
                      
                      // Check if CAPTCHA is required
                      if (isCaptchaRequired()) {
                        // Show CAPTCHA warning and make form visible
                        showCaptchaWarning();
                        
                        // Still try to submit the form - it might work if CAPTCHA is optional
                        try {
                          const submitButton = loginForm.querySelector('button[type="submit"], input[type="submit"]');
                          if (submitButton) {
                            submitButton.click();
                            
                            // Check if form submission was successful after a short delay
                            setTimeout(() => {
                              // If we're still on the login page, show a message to complete CAPTCHA manually
                              if (window.location.href.includes('/account/login')) {
                                showCaptchaWarning();
                              }
                            }, 1000);
                          } else {
                            // Fall back to form.submit() if no button found
                            loginForm.submit();
                          }
                        } catch (submitError) {
                          // Silent error - user will need to complete CAPTCHA manually
                        }
                      } else {
                        // No CAPTCHA, submit the form
                        try {
                          const submitButton = loginForm.querySelector('button[type="submit"], input[type="submit"]');
                          if (submitButton) {
                            submitButton.click();
                          } else {
                            // If no submit button found, try form.submit()
                            loginForm.submit();
                          }
                          
                          // Check if submission was successful
                          setTimeout(() => {
                            // If we haven't been redirected yet, redirect manually
                            if (window.location.href.includes('/account/login')) {
                              window.location.href = '/account';
                            }
                          }, 500);
                        } catch (submitError) {
                          hideLoadingOverlay();
                          document.body.classList.remove('facebook-login-in-progress');
                        }
                      }
                    } else {
                      hideLoadingOverlay();
                      document.body.classList.remove('facebook-login-in-progress');
                    }
                  } else {
                    hideLoadingOverlay();
                    document.body.classList.remove('facebook-login-in-progress');
                  }
                } catch (e) {
                  hideLoadingOverlay();
                  document.body.classList.remove('facebook-login-in-progress');
                }
              }, 500);
            } else {
              hideLoadingOverlay();
              document.body.classList.remove('facebook-login-in-progress');
            }
          } catch (e) {
            hideLoadingOverlay();
          }
        } else {
          hideLoadingOverlay();
        }
      }
      
      // Main function to process Facebook login from JWT token
      function processFacebookLogin() {
        const params = getUrlParams();
        
        // Check if we have a token in the URL that's specifically for Facebook
        if (params.facebook_token || (params.code && window.location.href.includes('facebook'))) {
          // If we have a Facebook token, process it
          if (params.facebook_token) {
            // Store token in case we need it later
            storeLoginParams({ facebook_token: params.facebook_token });
            
            // Process the token
            verifyAndProcessJWT(params.facebook_token);
            
            // Clean up URL to remove token
            try {
              const newUrl = new URL(window.location.href);
              newUrl.searchParams.delete('facebook_token');
              window.history.replaceState({}, document.title, newUrl.toString());
            } catch (e) {
              // Silent error - URL cleanup is not critical
            }
          }
        } else {
          // Check if we have stored parameters from a previous attempt
          const storedParams = getStoredLoginParams();
          if (storedParams && storedParams.facebook_token) {
            // Process stored token
            verifyAndProcessJWT(storedParams.facebook_token);
            
            // Clear stored params after processing
            clearStoredLoginParams();
          }
        }
      }
      
      // Wait for DOM to be ready before processing login
      document.addEventListener('DOMContentLoaded', function() {
        // Check if we're on the login page
        if (window.location.pathname.includes('/account/login')) {
          processFacebookLogin();
        }
      });
    })(); // End of immediately executing function
  </script>
  {% endif %}
</div>

{% schema %}
{
  "name": "Facebook Login Processor",
  "target": "section",
  "templates": ["customers/login", "customers/account", "customers/register"],
  "settings": [
    {
      "type": "text",
      "id": "app_url",
      "label": "App URL",
      "default": "https://shopify-collection-sorter.onrender.com",
      "info": "URL of the app that handles Facebook login (should match your Facebook App's redirect URI)"
    },
    {
      "type": "text",
      "id": "storefront_api_token",
      "label": "Storefront API Token",
      "info": "Optional: Enter your Storefront API token if not set in theme settings"
    }
  ]
}
{% endschema %}
