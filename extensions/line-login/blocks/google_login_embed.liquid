{% comment %}
  Google Login App Embed Block - Processes Google login redirects and handles authentication
{% endcomment %}

<div id="google-login-embed" class="google-login-embed">
  <!-- Hidden container - no visible UI -->
  
  {% if request.path contains '/account/login' %}
  <!-- Hidden form for Shopify login -->
  <form id="google-shopify-auto-login" method="post" action="/account/login" style="display: none;">
    <input type="email" name="customer[email]" id="google-customer-email">
    <input type="password" name="customer[password]" id="google-customer-password">
    <input type="hidden" name="form_type" value="customer_login">
    <input type="hidden" name="utf8" value="‚úì">
    <input type="hidden" name="return_to" id="google-return-to" value="/account">
    <input type="hidden" name="g-recaptcha-response" id="google-g-recaptcha-response" value="">
  </form>
  
  <!-- Loading overlay for Google login -->
  <div id="google-login-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center; flex-direction: column;">
    <div id="google-login-message" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); text-align: center; max-width: 90%; width: 400px;">
      <div class="spinner" style="margin: 0 auto 1rem; width: 40px; height: 40px; border: 4px solid rgba(66, 133, 244, 0.2); border-top-color: #4285F4; border-radius: 50%; animation: google-login-spin 1s linear infinite;"></div>
      <p style="font-size: 18px; margin-bottom: 0.5rem; color: #333; font-weight: bold;">Ê≠£Âú®Ëá™ÂãïÁôªÂÖ•‰∏≠‚ãØË´ãÁ®çÂÄô üêæ</p>
      <p style="font-size: 14px; color: #666; margin: 0;">Logging in with Google...</p>
    </div>
  </div>
  
  <style>
    @keyframes google-login-spin {
      to { transform: rotate(360deg); }
    }
    
    #google-login-overlay.show {
      display: flex !important;
    }
    
    .google-login-message {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #4285F4;
      border-radius: 5px;
      background-color: #f0f8ff;
      text-align: center;
    }
    
    .google-login-error {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #ff4b4b;
      border-radius: 5px;
      background-color: #fff0f0;
      text-align: center;
      color: #d32f2f;
    }
    
    .google-login-captcha-container {
      margin-top: 1rem;
      padding: 15px;
      border: 2px solid #4285F4;
      border-radius: 8px;
      background-color: #f8f9fa;
      text-align: center;
      animation: pulse-border 2s infinite;
    }
    
    @keyframes pulse-border {
      0% { border-color: #4285F4; }
      50% { border-color: #34a853; }
      100% { border-color: #4285F4; }
    }
  </style>
  {% endif %}
</div>

<script>
  // Create global config object for Google Login
  window.googleLoginConfig = window.googleLoginConfig || {};
  
  // Get Storefront API token from theme settings or fallback to shop.storefront_access_token
  window.googleLoginConfig.storefrontApiToken = {{ block.settings.storefront_api_token | json }} || {{ shop.storefront_access_token | json }} || '';
  
  // Debug mode
  window.googleLoginConfig.debug = true;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Function to get URL parameters
    function getUrlParams() {
      const params = {};
      const searchParams = new URLSearchParams(window.location.search);
      for (const [key, value] of searchParams.entries()) {
        params[key] = value;
      }
      
      // Also check hash fragment
      if (window.location.hash && window.location.hash.length > 1) {
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        for (const [key, value] of hashParams.entries()) {
          params[key] = value;
        }
      }
      
      return params;
    }

    // Function to check if CAPTCHA is required on the page
    function isCaptchaRequired() {
      return document.querySelector('.g-recaptcha') !== null || 
             document.querySelector('[data-sitekey]') !== null ||
             document.querySelector('[data-recaptcha-sitekey]') !== null ||
             document.body.textContent.includes('CAPTCHA') ||
             document.body.textContent.includes('captcha');
    }
    
    // Function to show loading overlay
    function showLoadingOverlay() {
      const overlay = document.getElementById('google-login-overlay');
      if (overlay) {
        overlay.classList.add('show');
      }
    }
    
    // Function to hide loading overlay
    function hideLoadingOverlay() {
      const overlay = document.getElementById('google-login-overlay');
      if (overlay) {
        overlay.classList.remove('show');
        // Add a slight delay before removing from DOM to allow for transition
        setTimeout(() => {
          overlay.style.display = 'none';
        }, 300);
      }
    }
    
    // Function to log debug messages
    function debugLog(...args) {
      if (window.googleLoginConfig.debug) {
        console.log('[Google Login]', ...args);
      }
    }
    
    // Function to display error message
    function showErrorMessage(message) {
      hideLoadingOverlay();
      
      const loginForm = document.querySelector('form.customer_login') || 
                        document.querySelector('form#customer_login') || 
                        document.querySelector('form[action*="/account/login"]');
      
      if (loginForm) {
        // Create error message element
        const errorDiv = document.createElement('div');
        errorDiv.className = 'google-login-error';
        errorDiv.innerHTML = `<p style="font-weight: bold;">Google ÁôªÂÖ•ÁôºÁîüÈåØË™§</p><p>${message}</p>`;
        
        // Insert at the top of the form
        loginForm.insertBefore(errorDiv, loginForm.firstChild);
      }
    }
    
    // Function to handle CAPTCHA challenge
    function handleCaptchaChallenge(email, password, returnUrl) {
      debugLog('Handling CAPTCHA challenge');
      hideLoadingOverlay();
      
      // Find the login form
      const loginForm = document.querySelector('form.customer_login') || 
                        document.querySelector('form#customer_login') || 
                        document.querySelector('form[action*="/account/login"]');
      
      if (!loginForm) {
        debugLog('No login form found for CAPTCHA handling');
        return;
      }
      
      // Find email and password fields and fill them
      const emailInputs = loginForm.querySelectorAll('input[type="email"], input[name="customer[email]"]');
      const passwordInputs = loginForm.querySelectorAll('input[type="password"], input[name="customer[password]"]');
      
      emailInputs.forEach(input => {
        input.value = email;
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
      });
      
      passwordInputs.forEach(input => {
        input.value = password;
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
      });
      
      // Create a message to guide the user
      const captchaContainer = document.createElement('div');
      captchaContainer.className = 'google-login-captcha-container';
      captchaContainer.innerHTML = `
        <p style="font-weight: bold; font-size: 16px; color: #4285F4;">ÊÇ®Â∑≤Âæû Google ÁôªÂÖ•</p>
        <p style="margin-bottom: 15px;">Ë´ãÂÆåÊàê‰∏ãÊñπÁöÑÈ©óË≠âÁ¢º‰ª•ÁπºÁ∫åÁôªÂÖ•</p>
        <p style="font-size: 14px; color: #666;">You've logged in with Google. Please complete the CAPTCHA below to continue.</p>
      `;
      
      // Insert at the top of the form
      loginForm.insertBefore(captchaContainer, loginForm.firstChild);
      
      // Find and highlight the CAPTCHA element
      const captchaElement = document.querySelector('.g-recaptcha') || 
                            document.querySelector('[data-sitekey]') || 
                            document.querySelector('[data-recaptcha-sitekey]');
      
      if (captchaElement) {
        captchaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        captchaElement.style.boxShadow = '0 0 10px 2px rgba(66, 133, 244, 0.7)';
        captchaElement.style.transition = 'box-shadow 0.3s ease-in-out';
        captchaElement.style.padding = '10px';
        captchaElement.style.borderRadius = '5px';
        captchaElement.style.margin = '15px auto';
        captchaElement.style.display = 'inline-block';
      }
      
      // Add event listener to auto-submit after CAPTCHA is completed
      if (typeof grecaptcha !== 'undefined') {
        try {
          grecaptcha.ready(function() {
            grecaptcha.execute();
          });
          
          window.captchaCallback = function(token) {
            debugLog('CAPTCHA completed, submitting form');
            loginForm.submit();
          };
        } catch (e) {
          debugLog('Error with grecaptcha:', e);
        }
      }
    }
    
    // Function to process Google login
    function processGoogleLogin() {
      const params = getUrlParams();
      
      // Check if this is a Google login redirect
      if (params.google_login === 'success') {
        // Show loading overlay
        showLoadingOverlay();
        
        // Extract customer information
        const customerId = params.customer_id || params.google_id || '';
        const customerName = params.name ? decodeURIComponent(params.name) : '';
        const customerEmail = params.customer_email ? decodeURIComponent(params.customer_email) : '';
        const accessToken = params.access_token || '';
        const returnUrl = params.return_url || '/account';
        
        debugLog('Processing Google login', {
          customerId,
          customerName,
          customerEmail,
          accessToken: accessToken ? '**********' : 'missing',
          returnUrl
        });
        
        // Check if we're on an error page or if CAPTCHA is required
        if (document.body.textContent.includes('Missing CAPTCHA token') || 
            document.body.textContent.includes('È©óË≠âÁ¢º') || 
            isCaptchaRequired()) {
          debugLog('CAPTCHA required detected');
          handleCaptchaChallenge(customerEmail, accessToken, returnUrl);
          return;
        }
        
        // If we have email and access token, proceed with login
        if (customerEmail && accessToken) {
          // Try to use our hidden form first for more reliable login
          const hiddenForm = document.getElementById('google-shopify-auto-login');
          if (hiddenForm) {
            debugLog('Using hidden form for login');
            
            // Set form values
            const emailInput = document.getElementById('google-customer-email');
            const passwordInput = document.getElementById('google-customer-password');
            const returnToInput = document.getElementById('google-return-to');
            
            if (emailInput && passwordInput) {
              emailInput.value = customerEmail;
              passwordInput.value = accessToken;
              
              if (returnToInput) {
                returnToInput.value = returnUrl;
              }
              
              // Submit the hidden form after a short delay
              setTimeout(() => {
                hiddenForm.submit();
              }, 500);
              
              return; // Exit early since we're using the hidden form
            }
          }
          
          // Fallback to filling the visible form
          debugLog('Falling back to visible form filling');
          
          // Find all possible email and password fields on the page
          const emailInputs = document.querySelectorAll('input[type="email"], input[name="customer[email]"]');
          const passwordInputs = document.querySelectorAll('input[type="password"], input[name="customer[password]"]');
          
          debugLog('Found form elements', {
            emailInputs: emailInputs.length,
            passwordInputs: passwordInputs.length
          });
          
          // Fill all email and password fields found
          emailInputs.forEach(input => {
            input.value = customerEmail;
            // Trigger input events to ensure any validation or listeners are triggered
            input.dispatchEvent(new Event('input', { bubbles: true }));
            input.dispatchEvent(new Event('change', { bubbles: true }));
          });
          
          passwordInputs.forEach(input => {
            input.value = accessToken;
            // Trigger input events to ensure any validation or listeners are triggered
            input.dispatchEvent(new Event('input', { bubbles: true }));
            input.dispatchEvent(new Event('change', { bubbles: true }));
          });
          
          // Check if CAPTCHA is present
          if (isCaptchaRequired()) {
            debugLog('CAPTCHA detected, waiting for user interaction');
            handleCaptchaChallenge(customerEmail, accessToken, returnUrl);
          } else {
            debugLog('No CAPTCHA detected, attempting to submit form');
            // If no CAPTCHA, try to auto-submit the form
            const loginForm = document.querySelector('form.customer_login') || 
                             document.querySelector('form#customer_login') || 
                             document.querySelector('form[action*="/account/login"]');
            
            if (loginForm) {
              const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
              
              // Add a slight delay before submitting to allow the form to update
              setTimeout(() => {
                debugLog('Submitting form');
                if (submitButton) {
                  submitButton.click();
                } else {
                  loginForm.submit();
                }
                // Keep overlay visible during submission
              }, 1000); // Increased delay for form submission
            } else {
              debugLog('No login form found');
              // If no form found, hide the overlay
              hideLoadingOverlay();
              showErrorMessage('ÁÑ°Ê≥ïÊâæÂà∞ÁôªÂÖ•Ë°®ÂñÆ„ÄÇË´ãÊâãÂãïËº∏ÂÖ•ÊÇ®ÁöÑÈõªÂ≠êÈÉµ‰ª∂ÂíåÂØÜÁ¢º„ÄÇ(Login form not found. Please enter your email and password manually.)');
            }
          }
        } else {
          debugLog('Missing email or access token', { hasEmail: !!customerEmail, hasToken: !!accessToken });
          // If missing email or token, hide the overlay
          hideLoadingOverlay();
          showErrorMessage('ÁôªÂÖ•Ë≥áË®ä‰∏çÂÆåÊï¥„ÄÇË´ãÊâãÂãïËº∏ÂÖ•ÊÇ®ÁöÑÈõªÂ≠êÈÉµ‰ª∂ÂíåÂØÜÁ¢º„ÄÇ(Login information incomplete. Please enter your email and password manually.)');
        }
      }
    }
    
    // Call the function to process Google login
    processGoogleLogin();
  });
</script>

{% schema %}
{
  "name": "Google Login Processor",
  "target": "body",
  "settings": [
    {
      "type": "text",
      "id": "storefront_api_token",
      "label": "Storefront API Token",
      "info": "Optional: Enter your Storefront API token if needed for additional functionality"
    }
  ]
}
{% endschema %}
