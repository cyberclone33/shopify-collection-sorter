{% comment %}
  Google Login App Embed Block - Processes Google login redirects and handles authentication
{% endcomment %}

<div id="google-login-embed" class="google-login-embed">
  <!-- Hidden container - no visible UI -->
  
  {% if request.path contains '/account/login' %}
  <!-- Loading overlay for Google login -->
  <div id="google-login-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center; flex-direction: column;">
    <div id="google-login-message" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); text-align: center; max-width: 90%; width: 400px;">
      <div class="spinner" style="margin: 0 auto 1rem; width: 40px; height: 40px; border: 4px solid rgba(66, 133, 244, 0.2); border-top-color: #4285F4; border-radius: 50%; animation: google-login-spin 1s linear infinite;"></div>
      <p style="font-size: 18px; margin-bottom: 0.5rem; color: #333; font-weight: bold;">正在自動登入中⋯請稍候 </p>
      <p style="font-size: 14px; color: #666; margin: 0;">Logging in with Google...</p>
      <p id="google-captcha-warning" style="display: none; margin-top: 1rem; color: #d32f2f; font-weight: bold; background-color: #ffebee; padding: 10px; border-radius: 4px;">請完成驗證碼以繼續登入 / Please complete the CAPTCHA to continue</p>
      <button id="google-login-close" onclick="document.getElementById('google-login-overlay').style.display='none'; document.body.classList.remove('google-login-in-progress');" style="display: none; margin-top: 1rem; padding: 8px 16px; background-color: #4285F4; color: white; border: none; border-radius: 4px; cursor: pointer;">關閉此視窗 / Close this overlay</button>
    </div>
  </div>
  
  <style>
    @keyframes google-login-spin {
      to { transform: rotate(360deg); }
    }
    
    #google-login-overlay.show {
      display: flex !important;
    }
    
    .google-login-message {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #4285F4;
      border-radius: 5px;
      background-color: #f0f8ff;
      text-align: center;
    }
    
    .google-login-error {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #ff4b4b;
      border-radius: 5px;
      background-color: #fff0f0;
      text-align: center;
      color: #d32f2f;
    }
    
    /* Hide login form during redirect */
    body.google-login-in-progress form.customer_login,
    body.google-login-in-progress form#customer_login,
    body.google-login-in-progress form[action*="/account/login"] {
      opacity: 0;
      pointer-events: none;
      position: absolute;
      z-index: -1;
    }
    
    /* Hide cursor in input fields during redirects */
    body.google-login-in-progress input {
      caret-color: transparent !important;
    }
  </style>
  
  <!-- Debug panel for development -->
  <div id="google-login-debug-panel" style="display: none;">
    <!-- Debug panel removed for production -->
  </div>
  
  {% endif %}
</div>

<!-- Early initialization check - outside of conditional blocks to always execute -->
<script>
  // Create global config object for Google Login
  window.googleLoginConfig = window.googleLoginConfig || {};
  
  // Debug mode - set to false for production
  window.googleLoginConfig.debug = false;
  
  // Get Storefront API token from theme settings or fallback to shop.storefront_access_token
  window.googleLoginConfig.storefrontApiToken = {{ block.settings.storefront_api_token | json }} || {{ shop.storefront_access_token | json }} || '';
  
  // Use shop domain from current URL
  window.googleLoginConfig.shopDomain = window.location.hostname;
  
  // URL for JWT verification API endpoint - Update to use the correct URL with CORS support
  window.googleLoginConfig.jwtVerifyUrl = 'https://shopify-collection-sorter.onrender.com/auth/google/verify';
  
  // Immediately executing function to avoid sandboxing issues
  (function() {
    // Store login parameters in sessionStorage to persist across page refreshes and tab switches
    function storeLoginParams(params) {
      if (params && Object.keys(params).length > 0) {
        try {
          sessionStorage.setItem('googleLoginParams', JSON.stringify(params));
        } catch (e) {
        }
      }
    }
    
    // Retrieve login parameters from sessionStorage
    function getStoredLoginParams() {
      try {
        const storedParams = sessionStorage.getItem('googleLoginParams');
        const params = storedParams ? JSON.parse(storedParams) : null;
        return params;
      } catch (e) {
        return null;
      }
    }
    
    // Clear stored login parameters
    function clearStoredLoginParams() {
      try {
        sessionStorage.removeItem('googleLoginParams');
      } catch (e) {
      }
    }
    
    // Function to get URL parameters
    function getUrlParams() {
      const params = {};
      try {
        const searchParams = new URLSearchParams(window.location.search);
        for (const [key, value] of searchParams.entries()) {
          params[key] = value;
        }
        
        // Also check hash fragment
        if (window.location.hash && window.location.hash.length > 1) {
          const hashParams = new URLSearchParams(window.location.hash.substring(1));
          for (const [key, value] of hashParams.entries()) {
            params[key] = value;
          }
        }
      } catch (e) {
      }
      
      return params;
    }

    // Function to check if CAPTCHA is required on the page
    function isCaptchaRequired() {
      try {
        const hasCaptcha = document.querySelector('.g-recaptcha') !== null || 
              document.querySelector('[data-sitekey]') !== null ||
              document.querySelector('[data-recaptcha-sitekey]') !== null;
        return hasCaptcha;
      } catch (e) {
        return false;
      }
    }
    
    // Function to show loading overlay
    function showLoadingOverlay() {
      try {
        const overlay = document.getElementById('google-login-overlay');
        if (overlay) {
          overlay.style.display = 'flex';
        } else {
        }
      } catch (e) {
      }
    }
    
    // Function to hide loading overlay
    function hideLoadingOverlay() {
      try {
        const overlay = document.getElementById('google-login-overlay');
        if (overlay) {
          overlay.style.display = 'none';
        } else {
        }
      } catch (e) {
      }
    }
    
    // Function to show CAPTCHA warning
    function showCaptchaWarning() {
      try {
        const captchaWarning = document.getElementById('google-captcha-warning');
        const closeButton = document.getElementById('google-login-close');
        const spinner = document.querySelector('#google-login-message .spinner');
        const messageBox = document.getElementById('google-login-message');
        
        if (captchaWarning) {
          captchaWarning.style.display = 'block';
        }
        
        if (closeButton) {
          closeButton.style.display = 'inline-block';
          // The onclick attribute is already set in the HTML
        }
        
        if (spinner) {
          spinner.style.display = 'none';
        }
        
        // Make the overlay more transparent to allow seeing the CAPTCHA
        const overlay = document.getElementById('google-login-overlay');
        if (overlay) {
          overlay.style.backgroundColor = 'rgba(0,0,0,0.2)';
          
          // Move the message box to the top to avoid covering the CAPTCHA
          if (messageBox) {
            messageBox.style.marginTop = '-200px';
          }
        }
        
        // Remove the class that hides the form to ensure CAPTCHA is visible
        document.body.classList.remove('google-login-in-progress');
        
        // Ensure the login form is visible
        const loginForm = document.querySelector('form.customer_login') || 
                          document.querySelector('form#customer_login') || 
                          document.querySelector('form[action*="/account/login"]');
        if (loginForm) {
          loginForm.style.opacity = '1';
          loginForm.style.pointerEvents = 'auto';
          loginForm.style.position = 'static';
          loginForm.style.zIndex = 'auto';
        }
        
        // Ensure the CAPTCHA is visible by scrolling to it if needed
        const captcha = document.querySelector('.g-recaptcha') || 
                       document.querySelector('[data-sitekey]') ||
                       document.querySelector('[data-recaptcha-sitekey]');
        if (captcha) {
          setTimeout(() => {
            captcha.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }, 500);
        }
        
      } catch (e) {
        // Fallback: just hide the overlay completely if there's an error
        hideLoadingOverlay();
        document.body.classList.remove('google-login-in-progress');
      }
    }
    
    // Function to log debug messages - keep the function but make it empty
    function debugLog(...args) {
      // Debug logging disabled for production
    }
    
    // Function to fix duplicate IDs on the page 
    function fixDuplicateIds() {
      try {
        // Find all elements with common Shopify IDs that might be duplicated
        const commonIds = ['customer-email', 'customer-password', 'customer_email', 'customer_password'];
        
        commonIds.forEach(id => {
          const elements = document.querySelectorAll(`#${id}`);
          
          if (elements.length > 1) {
            // Fix all but the first element by adding a suffix
            for (let i = 1; i < elements.length; i++) {
              const element = elements[i];
              const newId = `${id}-${i}`;
              element.id = newId;
            }
          }
        });
      } catch (e) {
      }
    }
    
    // Function to verify JWT token server-side and process login
    async function verifyAndProcessJWT(token) {
      try {
        showLoadingOverlay();
        
        // Enhanced token validation
        if (!token || typeof token !== 'string' || token.length < 20) {
          throw new Error('Invalid token format');
        }
        
        try {
          // Send token to backend for verification with detailed error handling
          const response = await fetch(window.googleLoginConfig.jwtVerifyUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ token })
          });
          
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`JWT verification failed: ${response.statusText}. Details: ${errorText}`);
          }
          
          // Get the verified data
          const userData = await response.json();
          
          // Now process the login with verified data
          processGoogleLoginWithData(userData);
        } catch (fetchError) {
          // Specific handling for fetch errors
          // Check if it's a CORS issue
          if (fetchError.message.includes('CORS') || fetchError.message.includes('Failed to fetch')) {
            throw new Error('CORS error: The server is not accessible from this domain. Please check CORS configuration.');
          } else {
            throw fetchError;
          }
        }
        
      } catch (error) {
        hideLoadingOverlay();
        
        // Add error message to the page
        try {
          const container = document.querySelector('.customer.login') || document.querySelector('#customer_login');
          if (container) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'google-login-error';
            errorDiv.innerHTML = 'Google login verification failed: ' + error.message + '. Please try again or use your email and password.';
            container.prepend(errorDiv);
          }
        } catch (e) {
        }
      }
    }
    
    // Process the Google login with verified data
    function processGoogleLoginWithData(userData) {
      if (userData && userData.google_login === 'success') {
        try {
          // Add class to body to hide login forms
          document.body.classList.add('google-login-in-progress');
          
          // Show loading overlay if not already showing
          showLoadingOverlay();
          
          // Extract customer email and access token from the verified data
          const customerEmail = userData.customer_email;
          const accessToken = userData.access_token;
          const returnUrl = userData.return_url || '/account';
          
          if (customerEmail && accessToken) {
            // Wait a bit to make sure the page is fully loaded
            setTimeout(() => {
              try {
                // Find the standard customer login form
                const loginForm = document.querySelector('form.customer_login') || 
                                  document.querySelector('form#customer_login') || 
                                  document.querySelector('form[action*="/account/login"]');
                
                if (loginForm) {
                  // Find email and password inputs within this form
                  let emailInput = loginForm.querySelector('input[type="email"], input[name="customer[email]"]');
                  let passwordInput = loginForm.querySelector('input[type="password"], input[name="customer[password]"]');
                  const returnToInput = loginForm.querySelector('input[name="return_to"]');
                  
                  // Try alternative selectors if the standard ones don't work
                  if (!emailInput) {
                    emailInput = document.getElementById('customer-email') || 
                                document.getElementById('customer_email');
                  }
                  
                  if (!passwordInput) {
                    passwordInput = document.getElementById('customer-password') || 
                                   document.getElementById('customer_password');
                  }
                  
                  if (emailInput && passwordInput) {
                    // Set the values
                    emailInput.value = customerEmail;
                    passwordInput.value = accessToken;
                    
                    // Trigger input events to update any validators
                    try {
                      emailInput.dispatchEvent(new Event('input', { bubbles: true }));
                      passwordInput.dispatchEvent(new Event('input', { bubbles: true }));
                      
                      // Also trigger change events
                      emailInput.dispatchEvent(new Event('change', { bubbles: true }));
                      passwordInput.dispatchEvent(new Event('change', { bubbles: true }));
                    } catch (e) {
                    }
                    
                    // Set return URL if field exists
                    if (returnToInput) {
                      returnToInput.value = returnUrl;
                    }
                    
                    // Always attempt to submit the form, even if CAPTCHA is detected
                    const hasCaptcha = isCaptchaRequired();
                    if (hasCaptcha) {
                      // Make the overlay semi-transparent but keep it visible
                      const overlay = document.getElementById('google-login-overlay');
                      if (overlay) {
                        overlay.style.backgroundColor = 'rgba(0,0,0,0.1)';
                      }
                      
                      // Keep the form visible but still try to submit
                      document.body.classList.remove('google-login-in-progress');
                      
                      // Try to submit the form
                      setTimeout(() => {
                        try {
                          // Try clicking the submit button first
                          const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
                          if (submitButton) {
                            submitButton.click();
                            
                            // Check if form submission was successful after a short delay
                            setTimeout(() => {
                              // If we're still on the login page, show a message to complete CAPTCHA manually
                              if (window.location.href.includes('/account/login')) {
                                showCaptchaWarning();
                              }
                            }, 1000);
                          } else {
                            // Fall back to form.submit() if no button found
                            loginForm.submit();
                          }
                        } catch (e) {
                          showCaptchaWarning();
                        }
                      }, 300);
                    } else {
                      // No CAPTCHA, proceed normally
                      setTimeout(() => {
                        try {
                          // Try clicking the submit button first (most reliable)
                          const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
                          if (submitButton) {
                            submitButton.click();
                          } else {
                            // Fall back to form.submit() if no button found
                            loginForm.submit();
                          }
                        } catch (e) {
                          // If all else fails, just redirect to account
                          window.location.href = '/account';
                        }
                      }, 300);
                    }
                  } else {
                    hideLoadingOverlay();
                    document.body.classList.remove('google-login-in-progress');
                  }
                } else {
                  hideLoadingOverlay();
                  document.body.classList.remove('google-login-in-progress');
                }
              } catch (e) {
                // If all else fails, just redirect to account
                window.location.href = '/account';
              }
            }, 500);
          } else {
            hideLoadingOverlay();
            document.body.classList.remove('google-login-in-progress');
          }
        } catch (e) {
          hideLoadingOverlay();
        }
      } else {
        hideLoadingOverlay();
      }
    }
    
    // Main function to process Google login from JWT token
    function processGoogleLogin() {
      const params = getUrlParams();
      
      // Check if we have a JWT token in the URL that's specifically for Google
      if (params.google_token || (params.code && window.location.href.includes('google'))) {
        // If we have a Google token, process it
        if (params.google_token) {
          storeLoginParams({ google_token: params.google_token });
          
          // Verify and process the JWT
          verifyAndProcessJWT(params.google_token);
          
          // Remove token from URL to prevent leakage in browser history
          try {
            const url = new URL(window.location.href);
            url.searchParams.delete('google_token');
            window.history.replaceState({}, document.title, url.toString());
          } catch (e) {
          }
        }
      } else {
        // Check for stored token (in case of page refresh)
        const storedParams = getStoredLoginParams();
        if (storedParams && storedParams.google_token) {
          verifyAndProcessJWT(storedParams.google_token);
        } else {
        }
      }
    }
    
    // Run the main function once DOM is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        fixDuplicateIds();
        processGoogleLogin();
      });
    } else {
      fixDuplicateIds();
      processGoogleLogin();
    }
    
    // Override window.addEventListener to ensure our keyboard shortcut works
    try {
      const originalAddEventListener = window.addEventListener;
      window.addEventListener = function(type, listener, options) {
        return originalAddEventListener.call(this, type, listener, options);
      };
    } catch (e) {
    }
    
  })(); // End of immediately executing function
</script>

{% schema %}
{
  "name": "Google Login Processor",
  "target": "section",
  "templates": ["customers/login", "customers/account", "customers/register"],
  "settings": [
    {
      "type": "text",
      "id": "storefront_api_token",
      "label": "Storefront API Token (Optional)",
      "info": "If provided, will be used for Storefront API operations instead of the default token"
    }
  ]
}
{% endschema %}
