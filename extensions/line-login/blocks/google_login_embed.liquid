{% comment %}
  Google Login App Embed Block - Processes Google login redirects and handles authentication
{% endcomment %}

<div id="google-login-embed" class="google-login-embed">
  <!-- Hidden container - no visible UI -->
  
  {% if request.path contains '/account/login' %}
  <!-- Hidden form for Shopify login -->
  <form id="google-shopify-auto-login" method="post" action="/account/login" style="display: none;">
    <input type="email" name="customer[email]" id="google-customer-email">
    <input type="password" name="customer[password]" id="google-customer-password">
    <input type="hidden" name="form_type" value="customer_login">
    <input type="hidden" name="utf8" value="✓">
    <input type="hidden" name="return_to" id="google-return-to" value="/account">
    <input type="hidden" name="g-recaptcha-response" id="google-g-recaptcha-response" value="">
  </form>
  
  <!-- Loading overlay for Google login -->
  <div id="google-login-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center; flex-direction: column;">
    <div id="google-login-message" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); text-align: center; max-width: 90%; width: 400px;">
      <div class="spinner" style="margin: 0 auto 1rem; width: 40px; height: 40px; border: 4px solid rgba(66, 133, 244, 0.2); border-top-color: #4285F4; border-radius: 50%; animation: google-login-spin 1s linear infinite;"></div>
      <p style="font-size: 18px; margin-bottom: 0.5rem; color: #333; font-weight: bold;">正在自動登入中⋯請稍候 </p>
      <p style="font-size: 14px; color: #666; margin: 0;">Logging in with Google...</p>
      <p id="google-captcha-warning" style="display: none; margin-top: 1rem; color: #d32f2f; font-weight: bold;">請不要切換分頁，否則可能需要重新驗證 / Please don't switch tabs or you may need to re-verify</p>
    </div>
  </div>
  
  <style>
    @keyframes google-login-spin {
      to { transform: rotate(360deg); }
    }
    
    #google-login-overlay.show {
      display: flex !important;
    }
    
    .google-login-message {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #4285F4;
      border-radius: 5px;
      background-color: #f0f8ff;
      text-align: center;
    }
    
    .google-login-error {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #ff4b4b;
      border-radius: 5px;
      background-color: #fff0f0;
      text-align: center;
      color: #d32f2f;
    }
    
    /* Hide login form during redirect */
    body.google-login-in-progress form.customer_login,
    body.google-login-in-progress form#customer_login,
    body.google-login-in-progress form[action*="/account/login"] {
      opacity: 0;
      pointer-events: none;
      position: absolute;
      z-index: -1;
    }
    
    /* Hide cursor in input fields during redirects */
    body.google-login-in-progress input {
      caret-color: transparent !important;
    }
  </style>
  {% endif %}
</div>

<script>
  // Create global config object for Google Login
  window.googleLoginConfig = window.googleLoginConfig || {};
  
  // Get Storefront API token from theme settings or fallback to shop.storefront_access_token
  window.googleLoginConfig.storefrontApiToken = {{ block.settings.storefront_api_token | json }} || {{ shop.storefront_access_token | json }} || '';
  
  // Debug mode
  window.googleLoginConfig.debug = true;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Store login parameters in sessionStorage to persist across page refreshes and tab switches
    function storeLoginParams(params) {
      if (params && Object.keys(params).length > 0) {
        sessionStorage.setItem('googleLoginParams', JSON.stringify(params));
      }
    }
    
    // Retrieve login parameters from sessionStorage
    function getStoredLoginParams() {
      const storedParams = sessionStorage.getItem('googleLoginParams');
      return storedParams ? JSON.parse(storedParams) : null;
    }
    
    // Clear stored login parameters
    function clearStoredLoginParams() {
      sessionStorage.removeItem('googleLoginParams');
    }
    
    // Function to get URL parameters
    function getUrlParams() {
      const params = {};
      const searchParams = new URLSearchParams(window.location.search);
      for (const [key, value] of searchParams.entries()) {
        params[key] = value;
      }
      
      // Also check hash fragment
      if (window.location.hash && window.location.hash.length > 1) {
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        for (const [key, value] of hashParams.entries()) {
          params[key] = value;
        }
      }
      
      return params;
    }

    // Function to check if CAPTCHA is required on the page
    function isCaptchaRequired() {
      return document.querySelector('.g-recaptcha') !== null || 
             document.querySelector('[data-sitekey]') !== null ||
             document.querySelector('[data-recaptcha-sitekey]') !== null;
    }
    
    // Function to show loading overlay
    function showLoadingOverlay() {
      const overlay = document.getElementById('google-login-overlay');
      if (overlay) {
        overlay.classList.add('show');
      }
    }
    
    // Function to hide loading overlay
    function hideLoadingOverlay() {
      const overlay = document.getElementById('google-login-overlay');
      if (overlay) {
        overlay.classList.remove('show');
        // Add a slight delay before removing from DOM to allow for transition
        setTimeout(() => {
          overlay.style.display = 'none';
        }, 300);
      }
    }
    
    // Function to log debug messages
    function debugLog(...args) {
      if (window.googleLoginConfig.debug) {
        console.log('[Google Login]', ...args);
      }
    }
    
    // Immediately check if we have a redirect parameter and disable autofill on login forms
    function disableAutofillOnForms() {
      const params = getUrlParams();
      const storedParams = getStoredLoginParams();
      
      // If we're being redirected from Google login
      if (params.google_login === 'success' || (storedParams && storedParams.google_login === 'success')) {
        debugLog('Google login redirect detected, disabling autofill on forms');
        
        // Find all login forms
        const loginForms = document.querySelectorAll('form.customer_login, form#customer_login, form[action*="/account/login"]');
        
        loginForms.forEach(form => {
          // First attempt: Add autocomplete="off" to form and all inputs
          form.setAttribute('autocomplete', 'off');
          form.setAttribute('data-google-login', 'true');
          
          // Second attempt: Replace email and password fields with new ones that have non-standard names
          setTimeout(() => {
            const emailInputs = form.querySelectorAll('input[type="email"], input[name="customer[email]"]');
            const passwordInputs = form.querySelectorAll('input[type="password"], input[name="customer[password]"]');
            
            emailInputs.forEach(input => {
              // Get current attributes
              const newInput = document.createElement('input');
              newInput.type = 'email';
              
              // Copy all attributes except name
              Array.from(input.attributes).forEach(attr => {
                if (attr.name !== 'name' && attr.name !== 'id' && attr.name !== 'autocomplete') {
                  newInput.setAttribute(attr.name, attr.value);
                }
              });
              
              // Set autocomplete off and use non-standard name
              newInput.setAttribute('autocomplete', 'new-email');
              newInput.setAttribute('autocomplete', 'off');
              newInput.setAttribute('name', 'customer[email]');
              
              // If there was an ID, keep it
              if (input.id) {
                newInput.id = input.id;
              }
              
              // Replace old input with new one
              input.parentNode.replaceChild(newInput, input);
            });
            
            passwordInputs.forEach(input => {
              // Get current attributes
              const newInput = document.createElement('input');
              newInput.type = 'password';
              
              // Copy all attributes except name
              Array.from(input.attributes).forEach(attr => {
                if (attr.name !== 'name' && attr.name !== 'id' && attr.name !== 'autocomplete') {
                  newInput.setAttribute(attr.name, attr.value);
                }
              });
              
              // Set autocomplete off and use non-standard name
              newInput.setAttribute('autocomplete', 'new-password');
              newInput.setAttribute('autocomplete', 'off');
              newInput.setAttribute('name', 'customer[password]');
              
              // If there was an ID, keep it
              if (input.id) {
                newInput.id = input.id;
              }
              
              // Replace old input with new one
              input.parentNode.replaceChild(newInput, input);
            });
          }, 0);
          
          // Add hidden honeypot fields to trick autofill
          const honeypotField1 = document.createElement('input');
          honeypotField1.type = 'text';
          honeypotField1.name = 'username';
          honeypotField1.style.display = 'none';
          
          const honeypotField2 = document.createElement('input');
          honeypotField2.type = 'password';
          honeypotField2.name = 'password';
          honeypotField2.style.display = 'none';
          
          // Insert at beginning of form
          form.insertBefore(honeypotField2, form.firstChild);
          form.insertBefore(honeypotField1, form.firstChild);
        });
      }
    }
    
    // Run autofill disabling immediately
    disableAutofillOnForms();
    
    // Handle visibility change to warn about CAPTCHA issues when switching tabs
    document.addEventListener('visibilitychange', function() {
      const params = getUrlParams();
      const storedParams = getStoredLoginParams();
      
      // Only show warning if we're in the middle of a Google login process
      if ((params.google_login === 'success' || (storedParams && storedParams.google_login === 'success')) && 
          document.visibilityState === 'hidden') {
        const captchaWarning = document.getElementById('google-captcha-warning');
        if (captchaWarning) {
          captchaWarning.style.display = 'block';
        }
      }
    });
    
    // Process Google login if parameters are present
    function processGoogleLogin() {
      const params = getUrlParams();
      let loginParams = params;
      
      // If no params in URL but we have stored params, use those (for tab switching recovery)
      if (!params.google_login && !params.customer_email) {
        const storedParams = getStoredLoginParams();
        if (storedParams && storedParams.google_login === 'success') {
          loginParams = storedParams;
          debugLog('Using stored login parameters', loginParams);
        }
      } else if (params.google_login === 'success') {
        // Store the parameters for potential tab switching recovery
        storeLoginParams(params);
      }
      
      // Check if this is a Google login redirect
      if (loginParams.google_login === 'success') {
        // Add class to body to hide login forms
        document.body.classList.add('google-login-in-progress');
        
        // Show loading overlay
        showLoadingOverlay();
        
        // Extract customer information
        const customerId = loginParams.customer_id || loginParams.google_id || '';
        const customerName = loginParams.name ? decodeURIComponent(loginParams.name) : '';
        const customerEmail = loginParams.customer_email ? decodeURIComponent(loginParams.customer_email) : '';
        const accessToken = loginParams.access_token || '';
        const returnUrl = loginParams.return_url || '/account';
        
        debugLog('Processing Google login', {
          customerId,
          customerName,
          customerEmail,
          accessToken: accessToken ? '**********' : 'missing',
          returnUrl
        });
        
        // If we have email and access token, proceed with login
        if (customerEmail && accessToken) {
          // Wait a bit to make sure our autofill protection has been applied
          setTimeout(() => {
            // Find all possible email and password fields on the page
            const emailInputs = document.querySelectorAll('input[type="email"], input[name="customer[email]"]');
            const passwordInputs = document.querySelectorAll('input[type="password"], input[name="customer[password]"]');
            
            debugLog('Found form elements', {
              emailInputs: emailInputs.length,
              passwordInputs: passwordInputs.length
            });
            
            // Fill all email and password fields found
            emailInputs.forEach(input => {
              input.value = customerEmail;
              // Trigger input events to ensure any validation or listeners are triggered
              input.dispatchEvent(new Event('input', { bubbles: true }));
              input.dispatchEvent(new Event('change', { bubbles: true }));
            });
            
            passwordInputs.forEach(input => {
              input.value = accessToken;
              // Trigger input events to ensure any validation or listeners are triggered
              input.dispatchEvent(new Event('input', { bubbles: true }));
              input.dispatchEvent(new Event('change', { bubbles: true }));
            });
            
            // Check if CAPTCHA is present
            if (isCaptchaRequired()) {
              debugLog('CAPTCHA detected, waiting for user interaction');
              // Hide loading overlay since user interaction is needed
              hideLoadingOverlay();
              
              // Add a helper message for the user
              const loginForm = document.querySelector('form.customer_login') || 
                               document.querySelector('form#customer_login') || 
                               document.querySelector('form[action*="/account/login"]');
              
              if (loginForm) {
                // Create a message to guide the user
                const messageDiv = document.createElement('div');
                messageDiv.className = 'google-login-message';
                messageDiv.innerHTML = '<p style="font-weight: bold;">您已從 Google 登入，請完成下方驗證碼以繼續。</p>' + 
                                      '<p>You\'ve logged in with Google. Please complete the CAPTCHA below to continue.</p>' +
                                      '<p style="color: #d32f2f;">請不要切換分頁或使用密碼自動填充，否則可能需要重新驗證</p>' +
                                      '<p style="color: #d32f2f;">Please don\'t switch tabs or use password autofill during verification</p>';
                messageDiv.style.color = '#4285F4'; // Google blue color
                
                // Insert at the top of the form
                loginForm.insertBefore(messageDiv, loginForm.firstChild);
                
                // Scroll to and highlight the CAPTCHA
                const captchaElement = document.querySelector('.g-recaptcha') || 
                                      document.querySelector('[data-sitekey]') || 
                                      document.querySelector('[data-recaptcha-sitekey]');
                
                if (captchaElement) {
                  captchaElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                  captchaElement.style.boxShadow = '0 0 10px 2px rgba(66, 133, 244, 0.7)';
                  captchaElement.style.transition = 'box-shadow 0.3s ease-in-out';
                }
                
                // Add event listener for form submission to clear stored params
                loginForm.addEventListener('submit', function() {
                  clearStoredLoginParams();
                });
              }
            } else {
              debugLog('No CAPTCHA detected, attempting to submit form');
              // If no CAPTCHA, try to auto-submit the form
              const loginForm = document.querySelector('form.customer_login') || 
                               document.querySelector('form#customer_login') || 
                               document.querySelector('form[action*="/account/login"]');
              
              if (loginForm) {
                const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
                
                // Add a slight delay before submitting to allow the form to update
                setTimeout(() => {
                  debugLog('Submitting form');
                  clearStoredLoginParams(); // Clear stored params before submitting
                  if (submitButton) {
                    submitButton.click();
                  } else {
                    loginForm.submit();
                  }
                  // Keep overlay visible during submission
                }, 500);
              } else {
                debugLog('No login form found');
                // If no form found, hide the overlay
                hideLoadingOverlay();
                // Remove the body class 
                document.body.classList.remove('google-login-in-progress');
              }
            }
          }, 200);
        } else {
          debugLog('Missing email or access token', { hasEmail: !!customerEmail, hasToken: !!accessToken });
          // If missing email or token, hide the overlay
          hideLoadingOverlay();
          // Remove the body class
          document.body.classList.remove('google-login-in-progress');
        }
      }
    }
    
    // Call the function to process Google login
    processGoogleLogin();
    
    // Add event listener for CAPTCHA completion
    window.onRecaptchaSuccess = function() {
      debugLog('CAPTCHA completed successfully');
      const loginForm = document.querySelector('form.customer_login') || 
                       document.querySelector('form#customer_login') || 
                       document.querySelector('form[action*="/account/login"]');
      
      if (loginForm) {
        clearStoredLoginParams(); // Clear stored params before submitting
        loginForm.submit();
      }
    };
    
    // Add CSS to prevent autofill styling
    const style = document.createElement('style');
    style.textContent = `
      /* Change the background color of autofilled inputs */
      input:-webkit-autofill,
      input:-webkit-autofill:hover,
      input:-webkit-autofill:focus,
      input:-webkit-autofill:active {
        -webkit-box-shadow: 0 0 0 30px white inset !important;
        -webkit-text-fill-color: inherit !important;
        transition: background-color 5000s ease-in-out 0s;
      }
    `;
    document.head.appendChild(style);
  });
</script>

{% schema %}
{
  "name": "Google Login Processor",
  "target": "body",
  "settings": [
    {
      "type": "text",
      "id": "storefront_api_token",
      "label": "Storefront API Token",
      "info": "Optional: Enter your Storefront API token if needed for additional functionality"
    }
  ]
}
{% endschema %}
