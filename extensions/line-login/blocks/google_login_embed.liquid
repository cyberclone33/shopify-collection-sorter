{% comment %}
  Google Login App Embed Block - Processes Google login redirects and handles authentication
{% endcomment %}

<div id="google-login-embed" class="google-login-embed">
  <!-- Hidden container - no visible UI -->
  
  {% if request.path contains '/account/login' %}
  <!-- Hidden form for Shopify login -->
  <form id="google-shopify-auto-login" method="post" action="/account/login" style="display: none;">
    <input type="email" name="customer[email]" id="google-customer-email">
    <input type="password" name="customer[password]" id="google-customer-password">
    <input type="hidden" name="form_type" value="customer_login">
    <input type="hidden" name="utf8" value="✓">
    <input type="hidden" name="return_to" id="google-return-to" value="/account">
    <input type="hidden" name="g-recaptcha-response" id="google-g-recaptcha-response" value="">
  </form>
  
  <!-- Loading overlay for Google login -->
  <div id="google-login-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center; flex-direction: column;">
    <div id="google-login-message" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); text-align: center; max-width: 90%; width: 400px;">
      <div class="spinner" style="margin: 0 auto 1rem; width: 40px; height: 40px; border: 4px solid rgba(66, 133, 244, 0.2); border-top-color: #4285F4; border-radius: 50%; animation: google-login-spin 1s linear infinite;"></div>
      <p style="font-size: 18px; margin-bottom: 0.5rem; color: #333; font-weight: bold;">正在自動登入中⋯請稍候 </p>
      <p style="font-size: 14px; color: #666; margin: 0;">Logging in with Google...</p>
      <p id="google-captcha-warning" style="display: none; margin-top: 1rem; color: #d32f2f; font-weight: bold;">請不要切換分頁，否則可能需要重新驗證 / Please don't switch tabs or you may need to re-verify</p>
    </div>
  </div>
  
  <style>
    @keyframes google-login-spin {
      to { transform: rotate(360deg); }
    }
    
    #google-login-overlay.show {
      display: flex !important;
    }
    
    .google-login-message {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #4285F4;
      border-radius: 5px;
      background-color: #f0f8ff;
      text-align: center;
    }
    
    .google-login-error {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #ff4b4b;
      border-radius: 5px;
      background-color: #fff0f0;
      text-align: center;
      color: #d32f2f;
    }
    
    /* Hide login form during redirect */
    body.google-login-in-progress form.customer_login,
    body.google-login-in-progress form#customer_login,
    body.google-login-in-progress form[action*="/account/login"] {
      opacity: 0;
      pointer-events: none;
      position: absolute;
      z-index: -1;
    }
    
    /* Hide cursor in input fields during redirects */
    body.google-login-in-progress input {
      caret-color: transparent !important;
    }
  </style>
  
  <!-- Debug panel for development -->
  <div id="google-login-debug-panel" style="position: fixed; bottom: 10px; right: 10px; background: rgba(0,0,0,0.8); color: #00ff00; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px; z-index: 10000; max-width: 500px; max-height: 300px; overflow: auto; display: none;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
      <strong>Google Login Debug</strong>
      <button onclick="document.getElementById('google-login-debug-panel').style.display='none'" style="background: none; border: none; color: white; cursor: pointer;">×</button>
    </div>
    <div id="google-login-debug-content"></div>
  </div>
  {% endif %}
</div>

<script>
  // Create global config object for Google Login
  window.googleLoginConfig = window.googleLoginConfig || {};
  
  // Get Storefront API token from theme settings or fallback to shop.storefront_access_token
  window.googleLoginConfig.storefrontApiToken = {{ block.settings.storefront_api_token | json }} || {{ shop.storefront_access_token | json }} || '';
  
  // Use shop domain from current URL
  window.googleLoginConfig.shopDomain = window.location.hostname;
  
  // Debug mode
  window.googleLoginConfig.debug = true;
  
  // URL for JWT verification API endpoint - FIXED to use the correct Render app URL from logs
  window.googleLoginConfig.jwtVerifyUrl = 'https://shopify-collection-sorter.onrender.com/auth/google/verify';
  
  document.addEventListener('DOMContentLoaded', function() {
    // Store login parameters in sessionStorage to persist across page refreshes and tab switches
    function storeLoginParams(params) {
      if (params && Object.keys(params).length > 0) {
        sessionStorage.setItem('googleLoginParams', JSON.stringify(params));
        debugLog('Stored login params:', params);
      }
    }
    
    // Retrieve login parameters from sessionStorage
    function getStoredLoginParams() {
      const storedParams = sessionStorage.getItem('googleLoginParams');
      const params = storedParams ? JSON.parse(storedParams) : null;
      debugLog('Retrieved stored params:', params);
      return params;
    }
    
    // Clear stored login parameters
    function clearStoredLoginParams() {
      sessionStorage.removeItem('googleLoginParams');
      debugLog('Cleared stored login params');
    }
    
    // Function to get URL parameters
    function getUrlParams() {
      const params = {};
      const searchParams = new URLSearchParams(window.location.search);
      for (const [key, value] of searchParams.entries()) {
        params[key] = value;
      }
      
      // Also check hash fragment
      if (window.location.hash && window.location.hash.length > 1) {
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        for (const [key, value] of hashParams.entries()) {
          params[key] = value;
        }
      }
      
      debugLog('URL parameters:', params);
      return params;
    }

    // Function to check if CAPTCHA is required on the page
    function isCaptchaRequired() {
      const hasCaptcha = document.querySelector('.g-recaptcha') !== null || 
             document.querySelector('[data-sitekey]') !== null ||
             document.querySelector('[data-recaptcha-sitekey]') !== null;
      debugLog('CAPTCHA required:', hasCaptcha);
      return hasCaptcha;
    }
    
    // Function to show loading overlay
    function showLoadingOverlay() {
      const overlay = document.getElementById('google-login-overlay');
      if (overlay) {
        overlay.classList.add('show');
        debugLog('Showing loading overlay');
      } else {
        debugLog('ERROR: Loading overlay element not found');
      }
    }
    
    // Function to hide loading overlay
    function hideLoadingOverlay() {
      const overlay = document.getElementById('google-login-overlay');
      if (overlay) {
        overlay.classList.remove('show');
        // Add a slight delay before removing from DOM to allow for transition
        setTimeout(() => {
          overlay.style.display = 'none';
        }, 300);
        debugLog('Hiding loading overlay');
      } else {
        debugLog('ERROR: Loading overlay element not found');
      }
    }
    
    // Function to log debug messages
    function debugLog(...args) {
      if (window.googleLoginConfig.debug) {
        console.log('[Google Login]', ...args);
        
        // Add to debug panel if it exists
        const debugPanel = document.getElementById('google-login-debug-panel');
        const debugContent = document.getElementById('google-login-debug-content');
        
        if (debugPanel && debugContent) {
          debugPanel.style.display = 'block';
          
          // Format the debug message
          const message = args.map(arg => {
            if (typeof arg === 'object') {
              try {
                return JSON.stringify(arg);
              } catch (e) {
                return String(arg);
              }
            }
            return String(arg);
          }).join(' ');
          
          // Add timestamp
          const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);
          const logEntry = document.createElement('div');
          logEntry.innerHTML = `<span style="opacity: 0.6;">[${timestamp}]</span> ${message}`;
          
          // Add to panel
          debugContent.appendChild(logEntry);
          
          // Auto-scroll to bottom
          debugPanel.scrollTop = debugPanel.scrollHeight;
          
          // Limit entries
          while (debugContent.children.length > 50) {
            debugContent.removeChild(debugContent.firstChild);
          }
        }
      }
    }
    
    // Immediately check if we have a redirect parameter and disable autofill on login forms
    function disableAutofillOnForms() {
      const params = getUrlParams();
      const storedParams = getStoredLoginParams();
      
      // If we're being redirected from Google login with a token
      if (params.token || (storedParams && storedParams.token)) {
        debugLog('Google login redirect detected, disabling autofill on forms');
        
        // Find all login forms
        const loginForms = document.querySelectorAll('form.customer_login, form#customer_login, form[action*="/account/login"]');
        debugLog('Found login forms:', loginForms.length);
        
        loginForms.forEach(form => {
          // First attempt: Add autocomplete="off" to form and all inputs
          form.setAttribute('autocomplete', 'off');
          form.setAttribute('data-google-login', 'true');
          
          // Second attempt: Replace email and password fields with new ones that have non-standard names
          setTimeout(() => {
            const emailInputs = form.querySelectorAll('input[type="email"], input[name="customer[email]"]');
            const passwordInputs = form.querySelectorAll('input[type="password"], input[name="customer[password]"]');
            
            debugLog('Found form inputs:', {emails: emailInputs.length, passwords: passwordInputs.length});
            
            emailInputs.forEach(input => {
              // Get current attributes
              const newInput = document.createElement('input');
              newInput.type = 'email';
              
              // Copy all attributes except name
              Array.from(input.attributes).forEach(attr => {
                if (attr.name !== 'name' && attr.name !== 'id' && attr.name !== 'autocomplete') {
                  newInput.setAttribute(attr.name, attr.value);
                }
              });
              
              // Set autocomplete off and use non-standard name
              newInput.setAttribute('autocomplete', 'new-email');
              newInput.setAttribute('autocomplete', 'off');
              newInput.setAttribute('name', 'customer[email]');
              
              // If there was an ID, keep it
              if (input.id) {
                newInput.id = input.id;
              }
              
              // Replace old input with new one
              input.parentNode.replaceChild(newInput, input);
            });
            
            passwordInputs.forEach(input => {
              // Get current attributes
              const newInput = document.createElement('input');
              newInput.type = 'password';
              
              // Copy all attributes except name
              Array.from(input.attributes).forEach(attr => {
                if (attr.name !== 'name' && attr.name !== 'id' && attr.name !== 'autocomplete') {
                  newInput.setAttribute(attr.name, attr.value);
                }
              });
              
              // Set autocomplete off and use non-standard name
              newInput.setAttribute('autocomplete', 'new-password');
              newInput.setAttribute('autocomplete', 'off');
              newInput.setAttribute('name', 'customer[password]');
              
              // If there was an ID, keep it
              if (input.id) {
                newInput.id = input.id;
              }
              
              // Replace old input with new one
              input.parentNode.replaceChild(newInput, input);
            });
          }, 100);
        });
      }
    }
    
    // Call the function to disable autofill
    disableAutofillOnForms();
    
    // Function to verify JWT token server-side and process login
    async function verifyAndProcessJWT(token) {
      try {
        debugLog('Verifying JWT token server-side');
        showLoadingOverlay();
        
        // Enhanced token validation
        if (!token || typeof token !== 'string' || token.length < 20) {
          throw new Error('Invalid token format');
        }
        
        debugLog('Token validation passed, sending to server:', token.substring(0, 15) + '...');
        
        // Send token to backend for verification
        const response = await fetch(window.googleLoginConfig.jwtVerifyUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Origin': window.location.origin
          },
          body: JSON.stringify({ token }),
          credentials: 'omit',
          mode: 'cors'
        });
        
        debugLog('Server response status:', response.status);
        
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`JWT verification failed: ${response.statusText}. Details: ${errorText}`);
        }
        
        // Get the verified data
        const userData = await response.json();
        debugLog('JWT verification successful', userData);
        
        // Now process the login with verified data
        processGoogleLoginWithData(userData);
        
      } catch (error) {
        debugLog('Error verifying JWT:', error.message);
        hideLoadingOverlay();
        
        // Add error message to the page
        const container = document.querySelector('.customer.login') || document.querySelector('#customer_login');
        if (container) {
          const errorDiv = document.createElement('div');
          errorDiv.className = 'google-login-error';
          errorDiv.innerHTML = 'Google login verification failed. Please try again or use your email and password.';
          container.prepend(errorDiv);
        }
      }
    }
    
    // Process the Google login with verified data
    function processGoogleLoginWithData(userData) {
      if (userData && userData.google_login === 'success') {
        debugLog('Processing successful login data');
        
        // Add class to body to hide login forms
        document.body.classList.add('google-login-in-progress');
        
        // Show loading overlay if not already showing
        showLoadingOverlay();
        
        // Extract customer email and access token from the verified data
        const customerEmail = userData.customer_email;
        const accessToken = userData.access_token;
        const returnUrl = userData.return_url || '/account';
        
        debugLog('Processing login with verified data', { 
          email: customerEmail,
          hasToken: !!accessToken,
          returnUrl
        });
        
        if (customerEmail && accessToken) {
          // Wait a bit to make sure our autofill protection has been applied
          setTimeout(() => {
            // Find all possible email and password fields on the page
            const emailInputs = document.querySelectorAll('input[type="email"], input[name="customer[email]"]');
            const passwordInputs = document.querySelectorAll('input[type="password"], input[name="customer[password]"]');
            
            debugLog('Available login inputs:', {
              emailInputs: emailInputs.length,
              passwordInputs: passwordInputs.length
            });
            
            // First, try using the hidden form
            const hiddenForm = document.getElementById('google-shopify-auto-login');
            if (hiddenForm) {
              debugLog('Using hidden login form');
              
              // Set the values on the hidden form
              const hiddenEmailInput = document.getElementById('google-customer-email');
              const hiddenPasswordInput = document.getElementById('google-customer-password');
              const hiddenReturnToInput = document.getElementById('google-return-to');
              
              if (hiddenEmailInput && hiddenPasswordInput) {
                hiddenEmailInput.value = customerEmail;
                hiddenPasswordInput.value = accessToken;
                
                debugLog('Set hidden form values:', {
                  email: hiddenEmailInput.value,
                  password: hiddenPasswordInput.value ? '(set)' : '(not set)'
                });
                
                if (hiddenReturnToInput) {
                  hiddenReturnToInput.value = returnUrl;
                }
                
                // If we detect captcha, show the special message
                if (isCaptchaRequired()) {
                  const captchaWarning = document.getElementById('google-captcha-warning');
                  if (captchaWarning) {
                    captchaWarning.style.display = 'block';
                  }
                  
                  // Keep showing loading overlay for visual feedback,
                  // but we can't auto-submit with CAPTCHA present
                  debugLog('CAPTCHA detected, cannot auto-submit');
                } else {
                  debugLog('No CAPTCHA detected, submitting hidden form');
                  setTimeout(() => {
                    try {
                      hiddenForm.submit();
                      debugLog('Hidden form submitted');
                    } catch (e) {
                      debugLog('Error submitting hidden form:', e.message);
                    }
                  }, 250);
                }
              } else {
                debugLog('ERROR: Hidden form inputs not found');
              }
            } else {
              debugLog('No hidden form found, attempting to populate visible form');
              
              // If hidden form is not available, try to find and fill the visible login form
              let loginForm = document.querySelector('form.customer_login') || 
                              document.querySelector('form#customer_login') || 
                              document.querySelector('form[action*="/account/login"]');
              
              if (loginForm) {
                debugLog('Found visible login form', loginForm);
                
                // Find email and password inputs within this form
                const formEmailInput = loginForm.querySelector('input[type="email"], input[name="customer[email]"]');
                const formPasswordInput = loginForm.querySelector('input[type="password"], input[name="customer[password]"]');
                const formReturnToInput = loginForm.querySelector('input[name="return_to"]');
                
                debugLog('Visible form inputs:', {
                  email: !!formEmailInput,
                  password: !!formPasswordInput,
                  returnTo: !!formReturnToInput
                });
                
                if (formEmailInput && formPasswordInput) {
                  formEmailInput.value = customerEmail;
                  formPasswordInput.value = accessToken;
                  
                  // Trigger input events to update any validators
                  formEmailInput.dispatchEvent(new Event('input', { bubbles: true }));
                  formPasswordInput.dispatchEvent(new Event('input', { bubbles: true }));
                  
                  debugLog('Set visible form values:', {
                    email: formEmailInput.value,
                    password: formPasswordInput.value ? '(set)' : '(not set)'
                  });
                  
                  if (formReturnToInput) {
                    formReturnToInput.value = returnUrl;
                  }
                  
                  if (isCaptchaRequired()) {
                    const captchaWarning = document.getElementById('google-captcha-warning');
                    if (captchaWarning) {
                      captchaWarning.style.display = 'block';
                    }
                    
                    // Keep showing overlay but don't submit due to CAPTCHA
                    debugLog('CAPTCHA detected on visible form, cannot auto-submit');
                  } else {
                    debugLog('No CAPTCHA detected, attempting to submit form');
                    // If no CAPTCHA, try to auto-submit the form
                    setTimeout(() => {
                      const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
                      if (submitButton) {
                        debugLog('Clicking submit button');
                        submitButton.click();
                      } else {
                        debugLog('No submit button found, calling form.submit()');
                        try {
                          loginForm.submit();
                          debugLog('Form submitted');
                        } catch (e) {
                          debugLog('Error submitting form:', e.message);
                        }
                      }
                    }, 500);
                  }
                } else {
                  debugLog('ERROR: Could not find email/password fields in the form');
                  hideLoadingOverlay();
                  document.body.classList.remove('google-login-in-progress');
                }
              } else {
                debugLog('ERROR: No login form found on the page');
                hideLoadingOverlay();
                document.body.classList.remove('google-login-in-progress');
              }
            }
          }, 200);
        } else {
          debugLog('ERROR: Missing email or access token in verified data');
          // If missing email or token, hide the overlay
          hideLoadingOverlay();
          // Remove the body class
          document.body.classList.remove('google-login-in-progress');
        }
      } else {
        debugLog('ERROR: Invalid verified data returned', userData);
        hideLoadingOverlay();
      }
    }
    
    // Function to process Google login from JWT token
    function processGoogleLogin() {
      // Check if we have a JWT token in the URL - also check in the path to support different URL formats
      const currentUrl = window.location.href;
      const urlParams = getUrlParams();
      let token = urlParams.token || null;

      debugLog('Checking for token in URL:', window.location.href);
      
      // If no token in standard params, try to extract it from the URL
      if (!token && currentUrl.includes('token=')) {
        try {
          debugLog('Extracting token from URL string');
          const tokenPart = currentUrl.split('token=')[1];
          if (tokenPart) {
            token = tokenPart.split('&')[0]; // Extract token until next parameter or end of string
            debugLog('Extracted token from URL');
          }
        } catch (e) {
          debugLog('Error extracting token from URL:', e.message);
        }
      }
      
      if (token) {
        debugLog('Found JWT token in URL');
        storeLoginParams({ token });
        
        // Verify and process the JWT
        verifyAndProcessJWT(token);
        
        // Remove token from URL to prevent leakage in browser history
        const url = new URL(window.location.href);
        url.searchParams.delete('token');
        window.history.replaceState({}, document.title, url.toString());
      } else {
        // Check for stored token (in case of page refresh)
        const storedParams = getStoredLoginParams();
        if (storedParams && storedParams.token) {
          debugLog('Found stored JWT token');
          verifyAndProcessJWT(storedParams.token);
        } else {
          debugLog('No token found in URL or storage');
        }
      }
    }
    
    // Call the function to process Google login right away
    processGoogleLogin();
    
    // Set up event listeners for manual login buttons
    document.addEventListener('click', function(event) {
      if (event.target.matches('.google-login-button, [data-google-login="true"]')) {
        debugLog('Google login button clicked');
        event.preventDefault();
        
        // Clear any previous params
        clearStoredLoginParams();
        
        // Get data attributes
        const button = event.target.closest('button, a, [data-google-login="true"]');
        const returnTo = button.getAttribute('data-return-to') || '/account';
        const state = button.getAttribute('data-state') || '';
        
        // Build redirect URL
        const redirectUrl = `/auth/google?state=${state}&return_to=${encodeURIComponent(returnTo)}`;
        
        // Redirect to Google auth
        window.location.href = redirectUrl;
      }
    });
    
    // Add keyboard shortcut to toggle debug panel
    document.addEventListener('keydown', function(event) {
      // Ctrl+Shift+D to toggle debug panel
      if (event.ctrlKey && event.shiftKey && event.key === 'D') {
        const debugPanel = document.getElementById('google-login-debug-panel');
        if (debugPanel) {
          debugPanel.style.display = debugPanel.style.display === 'none' ? 'block' : 'none';
        }
      }
    });
  });
</script>

{% schema %}
{
  "name": "Google Login Processor",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "storefront_api_token",
      "label": "Storefront API Token (Optional)",
      "info": "If provided, will be used for Storefront API operations instead of the default token"
    }
  ]
}
{% endschema %}
