{% comment %}
  Google Login App Embed Block - Processes Google login redirects and handles authentication
{% endcomment %}

<div id="google-login-embed" class="google-login-embed">
  <!-- Hidden container - no visible UI -->
  
  {% if request.path contains '/account/login' %}
  <!-- Loading overlay for Google login -->
  <div id="google-login-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 9999; justify-content: center; align-items: center; flex-direction: column;">
    <div id="google-login-message" style="background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); text-align: center; max-width: 90%; width: 400px;">
      <div class="spinner" style="margin: 0 auto 1rem; width: 40px; height: 40px; border: 4px solid rgba(66, 133, 244, 0.2); border-top-color: #4285F4; border-radius: 50%; animation: google-login-spin 1s linear infinite;"></div>
      <p style="font-size: 18px; margin-bottom: 0.5rem; color: #333; font-weight: bold;">正在自動登入中⋯請稍候 </p>
      <p style="font-size: 14px; color: #666; margin: 0;">Logging in with Google...</p>
      <p id="google-captcha-warning" style="display: none; margin-top: 1rem; color: #d32f2f; font-weight: bold;">請不要切換分頁，否則可能需要重新驗證 / Please don't switch tabs or you may need to re-verify</p>
    </div>
  </div>
  
  <style>
    @keyframes google-login-spin {
      to { transform: rotate(360deg); }
    }
    
    #google-login-overlay.show {
      display: flex !important;
    }
    
    .google-login-message {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #4285F4;
      border-radius: 5px;
      background-color: #f0f8ff;
      text-align: center;
    }
    
    .google-login-error {
      margin-top: 1rem;
      padding: 10px;
      border: 1px solid #ff4b4b;
      border-radius: 5px;
      background-color: #fff0f0;
      text-align: center;
      color: #d32f2f;
    }
    
    /* Hide login form during redirect */
    body.google-login-in-progress form.customer_login,
    body.google-login-in-progress form#customer_login,
    body.google-login-in-progress form[action*="/account/login"] {
      opacity: 0;
      pointer-events: none;
      position: absolute;
      z-index: -1;
    }
    
    /* Hide cursor in input fields during redirects */
    body.google-login-in-progress input {
      caret-color: transparent !important;
    }
  </style>
  
  <!-- Debug panel for development -->
  <div id="google-login-debug-panel" style="position: fixed; bottom: 10px; right: 10px; background: rgba(0,0,0,0.8); color: #00ff00; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px; z-index: 10000; max-width: 500px; max-height: 300px; overflow: auto; display: none;">
    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
      <strong>Google Login Debug</strong>
      <button onclick="document.getElementById('google-login-debug-panel').style.display='none'" style="background: none; border: none; color: white; cursor: pointer;">×</button>
    </div>
    <div id="google-login-debug-content"></div>
  </div>
  {% endif %}
</div>

<script>
  // Create global config object for Google Login
  window.googleLoginConfig = window.googleLoginConfig || {};
  
  // Get Storefront API token from theme settings or fallback to shop.storefront_access_token
  window.googleLoginConfig.storefrontApiToken = {{ block.settings.storefront_api_token | json }} || {{ shop.storefront_access_token | json }} || '';
  
  // Use shop domain from current URL
  window.googleLoginConfig.shopDomain = window.location.hostname;
  
  // Debug mode
  window.googleLoginConfig.debug = true;
  
  // URL for JWT verification API endpoint - FIXED to use the correct Render app URL from logs
  window.googleLoginConfig.jwtVerifyUrl = 'https://shopify-collection-sorter.onrender.com/auth/google/verify';
  
  // Immediately executing function to avoid sandboxing issues
  (function() {
    // Store login parameters in sessionStorage to persist across page refreshes and tab switches
    function storeLoginParams(params) {
      if (params && Object.keys(params).length > 0) {
        try {
          sessionStorage.setItem('googleLoginParams', JSON.stringify(params));
          debugLog('Stored login params:', params);
        } catch (e) {
          debugLog('Error storing params:', e.message);
        }
      }
    }
    
    // Retrieve login parameters from sessionStorage
    function getStoredLoginParams() {
      try {
        const storedParams = sessionStorage.getItem('googleLoginParams');
        const params = storedParams ? JSON.parse(storedParams) : null;
        debugLog('Retrieved stored params:', params);
        return params;
      } catch (e) {
        debugLog('Error retrieving params:', e.message);
        return null;
      }
    }
    
    // Clear stored login parameters
    function clearStoredLoginParams() {
      try {
        sessionStorage.removeItem('googleLoginParams');
        debugLog('Cleared stored login params');
      } catch (e) {
        debugLog('Error clearing params:', e.message);
      }
    }
    
    // Function to get URL parameters
    function getUrlParams() {
      const params = {};
      try {
        const searchParams = new URLSearchParams(window.location.search);
        for (const [key, value] of searchParams.entries()) {
          params[key] = value;
        }
        
        // Also check hash fragment
        if (window.location.hash && window.location.hash.length > 1) {
          const hashParams = new URLSearchParams(window.location.hash.substring(1));
          for (const [key, value] of hashParams.entries()) {
            params[key] = value;
          }
        }
      } catch (e) {
        debugLog('Error parsing URL params:', e.message);
      }
      
      debugLog('URL parameters:', params);
      return params;
    }

    // Function to check if CAPTCHA is required on the page
    function isCaptchaRequired() {
      try {
        const hasCaptcha = document.querySelector('.g-recaptcha') !== null || 
              document.querySelector('[data-sitekey]') !== null ||
              document.querySelector('[data-recaptcha-sitekey]') !== null;
        debugLog('CAPTCHA required:', hasCaptcha);
        return hasCaptcha;
      } catch (e) {
        debugLog('Error checking for CAPTCHA:', e.message);
        return false;
      }
    }
    
    // Function to show loading overlay
    function showLoadingOverlay() {
      try {
        const overlay = document.getElementById('google-login-overlay');
        if (overlay) {
          overlay.style.display = 'flex';
          debugLog('Showing loading overlay');
        } else {
          debugLog('ERROR: Loading overlay element not found');
        }
      } catch (e) {
        debugLog('Error showing overlay:', e.message);
      }
    }
    
    // Function to hide loading overlay
    function hideLoadingOverlay() {
      try {
        const overlay = document.getElementById('google-login-overlay');
        if (overlay) {
          overlay.style.display = 'none';
          debugLog('Hiding loading overlay');
        } else {
          debugLog('ERROR: Loading overlay element not found');
        }
      } catch (e) {
        debugLog('Error hiding overlay:', e.message);
      }
    }
    
    // Function to log debug messages
    function debugLog(...args) {
      if (window.googleLoginConfig.debug) {
        console.log('[Google Login]', ...args);
        
        try {
          // Add to debug panel if it exists
          const debugPanel = document.getElementById('google-login-debug-panel');
          const debugContent = document.getElementById('google-login-debug-content');
          
          if (debugPanel && debugContent) {
            debugPanel.style.display = 'block';
            
            // Format the debug message
            const message = args.map(arg => {
              if (typeof arg === 'object') {
                try {
                  return JSON.stringify(arg);
                } catch (e) {
                  return String(arg);
                }
              }
              return String(arg);
            }).join(' ');
            
            // Add timestamp
            const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);
            const logEntry = document.createElement('div');
            logEntry.innerHTML = `<span style="opacity: 0.6;">[${timestamp}]</span> ${message}`;
            
            // Add to panel
            debugContent.appendChild(logEntry);
            
            // Auto-scroll to bottom
            debugPanel.scrollTop = debugPanel.scrollHeight;
            
            // Limit entries
            while (debugContent.children.length > 50) {
              debugContent.removeChild(debugContent.firstChild);
            }
          }
        } catch (e) {
          console.error('[Google Login Debug Error]', e.message);
        }
      }
    }
    
    // Function to fix duplicate IDs on the page 
    function fixDuplicateIds() {
      try {
        debugLog('Checking for duplicate IDs on the page');
        
        // Find all elements with common Shopify IDs that might be duplicated
        const commonIds = ['customer-email', 'customer-password', 'customer_email', 'customer_password'];
        
        commonIds.forEach(id => {
          const elements = document.querySelectorAll(`#${id}`);
          
          if (elements.length > 1) {
            debugLog(`Found ${elements.length} elements with duplicate ID: ${id}`);
            
            // Fix all but the first element by adding a suffix
            for (let i = 1; i < elements.length; i++) {
              const element = elements[i];
              const newId = `${id}-${i}`;
              element.id = newId;
              debugLog(`Fixed duplicate ID: changed ${id} to ${newId}`);
            }
          }
        });
      } catch (e) {
        debugLog('Error fixing duplicate IDs:', e.message);
      }
    }
    
    // Function to verify JWT token server-side and process login
    async function verifyAndProcessJWT(token) {
      try {
        debugLog('Starting JWT verification process');
        showLoadingOverlay();
        
        // Enhanced token validation
        if (!token || typeof token !== 'string' || token.length < 20) {
          throw new Error('Invalid token format');
        }
        
        debugLog('Token validation passed, sending to server:', token.substring(0, 15) + '...');
        
        // Send token to backend for verification
        const response = await fetch(window.googleLoginConfig.jwtVerifyUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ token })
        });
        
        debugLog('Server response status:', response.status);
        
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`JWT verification failed: ${response.statusText}. Details: ${errorText}`);
        }
        
        // Get the verified data
        const userData = await response.json();
        debugLog('JWT verification successful', userData);
        
        // Now process the login with verified data
        processGoogleLoginWithData(userData);
        
      } catch (error) {
        debugLog('Error verifying JWT:', error.message);
        hideLoadingOverlay();
        
        // Add error message to the page
        try {
          const container = document.querySelector('.customer.login') || document.querySelector('#customer_login');
          if (container) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'google-login-error';
            errorDiv.innerHTML = 'Google login verification failed. Please try again or use your email and password.';
            container.prepend(errorDiv);
          }
        } catch (e) {
          debugLog('Error showing error message:', e.message);
        }
      }
    }
    
    // Process the Google login with verified data
    function processGoogleLoginWithData(userData) {
      if (userData && userData.google_login === 'success') {
        debugLog('Processing successful login data');
        
        try {
          // Add class to body to hide login forms
          document.body.classList.add('google-login-in-progress');
          
          // Show loading overlay if not already showing
          showLoadingOverlay();
          
          // Extract customer email and access token from the verified data
          const customerEmail = userData.customer_email;
          const accessToken = userData.access_token;
          const returnUrl = userData.return_url || '/account';
          
          debugLog('Processing login with verified data', { 
            email: customerEmail,
            hasToken: !!accessToken,
            returnUrl
          });
          
          if (customerEmail && accessToken) {
            // Wait a bit to make sure the page is fully loaded
            setTimeout(() => {
              try {
                // Find the standard customer login form
                const loginForm = document.querySelector('form.customer_login') || 
                                  document.querySelector('form#customer_login') || 
                                  document.querySelector('form[action*="/account/login"]');
                
                if (loginForm) {
                  debugLog('Found Shopify login form');
                  
                  // Find email and password inputs within this form
                  const emailInput = loginForm.querySelector('input[type="email"], input[name="customer[email]"]');
                  const passwordInput = loginForm.querySelector('input[type="password"], input[name="customer[password]"]');
                  const returnToInput = loginForm.querySelector('input[name="return_to"]');
                  
                  if (emailInput && passwordInput) {
                    debugLog('Setting values on Shopify login form');
                    
                    // Set the values
                    emailInput.value = customerEmail;
                    passwordInput.value = accessToken;
                    
                    // Trigger input events to update any validators
                    try {
                      emailInput.dispatchEvent(new Event('input', { bubbles: true }));
                      passwordInput.dispatchEvent(new Event('input', { bubbles: true }));
                    } catch (e) {
                      debugLog('Error dispatching input events:', e.message);
                    }
                    
                    // Set return URL if field exists
                    if (returnToInput) {
                      returnToInput.value = returnUrl;
                    }
                    
                    // Check for CAPTCHA
                    if (isCaptchaRequired()) {
                      debugLog('CAPTCHA detected, cannot auto-submit');
                      const captchaWarning = document.getElementById('google-captcha-warning');
                      if (captchaWarning) {
                        captchaWarning.style.display = 'block';
                      }
                    } else {
                      // Submit the form after a short delay
                      setTimeout(() => {
                        try {
                          debugLog('Submitting Shopify login form');
                          
                          // Try clicking the submit button first (most reliable)
                          const submitButton = loginForm.querySelector('input[type="submit"], button[type="submit"]');
                          if (submitButton) {
                            debugLog('Clicking submit button');
                            submitButton.click();
                          } else {
                            // Fall back to form.submit() if no button found
                            debugLog('No submit button found, calling form.submit()');
                            loginForm.submit();
                          }
                        } catch (e) {
                          debugLog('Error submitting form:', e.message);
                          // If all else fails, just redirect to account
                          window.location.href = '/account';
                        }
                      }, 300);
                    }
                  } else {
                    debugLog('Could not find email/password fields in the form');
                    hideLoadingOverlay();
                    document.body.classList.remove('google-login-in-progress');
                  }
                } else {
                  debugLog('No login form found on the page');
                  hideLoadingOverlay();
                  document.body.classList.remove('google-login-in-progress');
                }
              } catch (e) {
                debugLog('Error during form processing:', e.message);
                // If all else fails, just redirect to account
                window.location.href = '/account';
              }
            }, 500);
          } else {
            debugLog('ERROR: Missing email or access token in verified data');
            hideLoadingOverlay();
            document.body.classList.remove('google-login-in-progress');
          }
        } catch (e) {
          debugLog('Error in processGoogleLoginWithData:', e.message);
          hideLoadingOverlay();
        }
      } else {
        debugLog('ERROR: Invalid verified data returned', userData);
        hideLoadingOverlay();
      }
    }
    
    // Main function to process Google login from JWT token
    function processGoogleLogin() {
      debugLog('Checking for Google Login JWT token');
      const params = getUrlParams();
      
      // Check if we have a JWT token in the URL
      if (params.token) {
        debugLog('Found JWT token in URL');
        storeLoginParams({ token: params.token });
        
        // Verify and process the JWT
        verifyAndProcessJWT(params.token);
        
        // Remove token from URL to prevent leakage in browser history
        try {
          const url = new URL(window.location.href);
          url.searchParams.delete('token');
          window.history.replaceState({}, document.title, url.toString());
        } catch (e) {
          debugLog('Error clearing token from URL:', e.message);
        }
      } else {
        // Check for stored token (in case of page refresh)
        const storedParams = getStoredLoginParams();
        if (storedParams && storedParams.token) {
          debugLog('Found stored JWT token');
          verifyAndProcessJWT(storedParams.token);
        } else {
          debugLog('No token found in URL or storage');
        }
      }
    }
    
    // Run the main function once DOM is loaded
    if (document.readyState === 'loading') {
      debugLog('Document still loading, adding DOMContentLoaded listener');
      document.addEventListener('DOMContentLoaded', function() {
        fixDuplicateIds();
        processGoogleLogin();
      });
    } else {
      debugLog('Document already loaded, running immediately');
      fixDuplicateIds();
      processGoogleLogin();
    }
    
    // Override window.addEventListener to ensure our keyboard shortcut works
    try {
      const originalAddEventListener = window.addEventListener;
      window.addEventListener = function(type, listener, options) {
        if (type === 'keydown' && !this._hasKeydownListener) {
          this._hasKeydownListener = true;
          originalAddEventListener.call(this, 'keydown', function(event) {
            // Ctrl+Shift+D to toggle debug panel
            if (event.ctrlKey && event.shiftKey && event.key === 'D') {
              const debugPanel = document.getElementById('google-login-debug-panel');
              if (debugPanel) {
                debugPanel.style.display = debugPanel.style.display === 'none' ? 'block' : 'none';
              }
            }
          }, options);
        }
        return originalAddEventListener.call(this, type, listener, options);
      };
    } catch (e) {
      debugLog('Error overriding addEventListener:', e.message);
    }
    
  })(); // End of immediately executing function
</script>

{% schema %}
{
  "name": "Google Login Processor",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "storefront_api_token",
      "label": "Storefront API Token (Optional)",
      "info": "If provided, will be used for Storefront API operations instead of the default token"
    }
  ]
}
{% endschema %}
