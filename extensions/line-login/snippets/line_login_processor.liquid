{% comment %}
  This snippet processes LINE login requests and should be included in the theme.liquid file
  It handles the login using Shopify's Storefront API Customer Access Token
{% endcomment %}

{% render 'line_login_config' %}

{% if request.path contains '/account/login' and request.params.line_login == 'success' %}
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      const customerEmail = '{{ request.params.customer_email }}';
      const customerPassword = '{{ request.params.access_token }}'; // Using LINE access token as password
      
      if (customerEmail && customerPassword) {
        try {
          // Create Customer Access Token using Storefront API
          const response = await fetch('/api/2024-01/graphql.json', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Shopify-Storefront-Access-Token': window.lineLoginConfig.storefrontApiToken
            },
            body: JSON.stringify({
              query: `
                mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {
                  customerAccessTokenCreate(input: $input) {
                    customerAccessToken {
                      accessToken
                      expiresAt
                    }
                    customerUserErrors {
                      message
                    }
                  }
                }
              `,
              variables: {
                input: {
                  email: customerEmail,
                  password: customerPassword
                }
              }
            })
          });

          const data = await response.json();
          
          if (data.data?.customerAccessTokenCreate?.customerAccessToken?.accessToken) {
            // Set the secure session cookie
            document.cookie = '_secure_session_id=' + data.data.customerAccessTokenCreate.customerAccessToken.accessToken + '; path=/';
            
            // Create info message
            const infoMessage = document.createElement('div');
            infoMessage.className = 'line-login-info-message';
            infoMessage.innerHTML = `
              <style>
                .line-login-info-message {
                  background-color: #f0f8f0;
                  border: 1px solid #06C755;
                  border-radius: 4px;
                  padding: 15px;
                  margin-bottom: 20px;
                  text-align: center;
                  color: #222;
                }
                .line-login-info-message h3 {
                  color: #06C755;
                  margin-top: 0;
                }
                .line-brand {
                  color: #06C755;
                  font-weight: bold;
                }
              </style>
              <h3>{{ 'line_login.handler.login_success' | t }}</h3>
              <p>{{ 'line_login.handler.redirecting' | t }}</p>
            `;

            // Insert message before the login form
            const loginForm = document.querySelector('form[action*="account/login"]');
            if (loginForm) {
              loginForm.parentNode.insertBefore(infoMessage, loginForm);
              loginForm.style.display = 'none';
            }

            // Redirect to account page
            setTimeout(() => {
              window.location.href = '/account';
            }, 2000);
          } else {
            throw new Error('Failed to create access token');
          }
        } catch (error) {
          console.error('LINE login error:', error);
          // Show error message
          const errorMessage = document.createElement('div');
          errorMessage.className = 'line-login-error-message';
          errorMessage.innerHTML = `
            <style>
              .line-login-error-message {
                background-color: #fff0f0;
                border: 1px solid #ff4444;
                border-radius: 4px;
                padding: 15px;
                margin-bottom: 20px;
                text-align: center;
                color: #222;
              }
            </style>
            <p>{{ 'line_login.handler.login_error' | t }}</p>
          `;
          
          const loginForm = document.querySelector('form[action*="account/login"]');
          if (loginForm) {
            loginForm.parentNode.insertBefore(errorMessage, loginForm);
          }
        }
      }
    });
  </script>
{% endif %}
