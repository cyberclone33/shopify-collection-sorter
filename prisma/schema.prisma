generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model SortedCollection {
  id              String   @id @default(cuid())
  shop            String
  collectionId    String
  collectionTitle String
  sortedAt        DateTime @default(now())
  sortOrder       String   @default("MANUAL")

  @@unique([shop, collectionId], name: "shop_collectionId")
}

model LineUser {
  id                String    @id @default(cuid())
  shop              String
  lineId            String
  lineAccessToken   String?
  lineRefreshToken  String?
  tokenExpiresAt    DateTime?
  displayName       String?
  pictureUrl        String?
  email             String?
  shopifyCustomerId String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([shop, lineId])
}

model GoogleUser {
  id                 String    @id @default(cuid())
  shop               String
  googleId           String
  googleAccessToken  String?
  googleRefreshToken String?
  tokenExpiresAt     DateTime?
  displayName        String?
  pictureUrl         String?
  email              String?
  shopifyCustomerId  String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([shop, googleId], name: "shop_googleId")
}

model FacebookUser {
  id                  String    @id @default(cuid())
  shop                String
  facebookId          String
  facebookAccessToken String?
  tokenExpiresAt      DateTime?
  displayName         String?
  pictureUrl          String?
  email               String?
  shopifyCustomerId   String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([shop, facebookId], name: "shop_facebookId")
}

model ShelfLifeItem {
  id                  String                     @id @default(cuid())
  shop                String
  productId           String
  batchId             String
  expirationDate      DateTime
  quantity            Int
  batchQuantity       Int?
  location            String?
  shopifyProductId    String?
  shopifyVariantId    String?
  shopifyProductTitle String?
  shopifyVariantTitle String?
  syncStatus          String?
  syncMessage         String?
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  currencyCode        String?
  variantCost         Float?
  variantPrice        Float?
  priceChanges        ShelfLifeItemPriceChange[]

  @@unique([productId, batchId], name: "productId_batchId")
}

model ShelfLifeItemPriceChange {
  id                     String         @id @default(cuid())
  shop                   String
  shelfLifeItemId        String?
  shopifyVariantId       String
  originalPrice          Float
  originalCompareAtPrice Float?
  newPrice               Float
  newCompareAtPrice      Float
  currencyCode           String?
  appliedAt              DateTime       @default(now())
  appliedByUserId        String?
  appliedByUserName      String?
  status                 String         @default("APPLIED")
  notes                  String?
  shelfLifeItem          ShelfLifeItem? @relation(fields: [shelfLifeItemId], references: [id])

  @@index([shelfLifeItemId])
  @@index([shopifyVariantId])
}

model DailyDiscountLog {
  id                 String    @id @default(cuid())
  shop               String
  productId          String
  productTitle       String
  variantId          String
  variantTitle       String?
  originalPrice      Float
  discountedPrice    Float
  compareAtPrice     Float?
  costPrice          Float?
  profitMargin       Float?
  discountPercentage Float
  savingsAmount      Float
  savingsPercentage  Float
  currencyCode       String    @default("USD")
  appliedAt          DateTime  @default(now())
  appliedByUserId    String?
  imageUrl           String?
  inventoryQuantity  Int?
  isRandomDiscount   Boolean   @default(true)
  notes              String?
  // New fields for revert tracking
  isReverted         Boolean   @default(false)
  revertedAt         DateTime?
  revertOriginalPrice Float?
  revertDiscountedPrice Float?
  revertCompareAtPrice Float?
  revertNotes        String?

  @@index([shop])
  @@index([variantId])
  @@index([appliedAt])
}

model SelectedDailyDiscount {
  id            String   @id @default(cuid())
  shop          String
  productId     String
  productTitle  String
  variantId     String
  variantTitle  String?
  displayOrder  Int      @default(0)
  imageUrl      String?
  price         Float
  compareAtPrice Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([shop, productId, variantId])
  @@index([shop])
  @@index([displayOrder])
}
